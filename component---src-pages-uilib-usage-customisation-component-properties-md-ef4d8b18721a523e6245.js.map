{"version":3,"sources":["webpack:///./src/pages/uilib/usage/customisation/component-properties.md"],"names":["_frontmatter","title","draft","order","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_8__","_extends","mdxType","parentName","href","Tags_ComponentBox__WEBPACK_IMPORTED_MODULE_10__","scope","hamburgerIcon","useRender","isMDXComponent"],"mappings":"00BAQO,IAAMA,EAAe,CAC1BC,MAAS,uBACTC,OAAS,EACTC,MAAS,GAQLC,EAAc,CAClBJ,gBAEIK,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,EAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,IAAAD,CAACN,EAADQ,EAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EH,OAAAC,EAAA,IAAAD,CAAA,kCACAA,OAAAC,EAAA,IAAAD,CAAA,kBAAaA,OAAAC,EAAA,IAAAD,CAAA,IAAAE,EAAA,CAAGE,WAAW,KAAQ,CAC/BC,KAAQ,sBADC,aAAb,gBAEuCL,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,cAFvC,2IAEyOJ,OAAAC,EAAA,IAAAD,CAAA,IAAAE,EAAA,CAAGE,WAAW,KAAQ,CAC3PC,KAAQ,kCAD6N,qBAFzO,KAKAL,OAAAC,EAAA,IAAAD,CAAA,yFACAA,OAAAC,EAAA,IAAAD,CAAA,mCACAA,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcH,QAAQ,gBAAtB,+LAeAH,OAAAC,EAAA,IAAAD,CAAA,8BACAA,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcC,MAAO,CACnBC,2BACCC,WAAS,EAACN,QAAQ,gBAFrB,miBAkCAH,OAAAC,EAAA,IAAAD,CAAA,2CACAA,OAAAC,EAAA,IAAAD,CAAA,kBACEA,OAAAC,EAAA,IAAAD,CAAA,KAAGI,WAAW,cAAd,iDAEFJ,OAAAC,EAAA,IAAAD,CAAA,iCAA4BA,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA5B,qDAAmIJ,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,cAAnI,2BAAqNJ,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,QAArN,gLAGAJ,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcG,WAAS,EAACN,QAAQ,gBAAhC,mfA0BJR,EAAWe,gBAAiB","file":"component---src-pages-uilib-usage-customisation-component-properties-md-ef4d8b18721a523e6245.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport 'dnb-ui-lib/src/web-components';\nimport ComponentBox from 'Tags/ComponentBox';\nimport { hamburger as hamburgerIcon } from 'dnb-ui-lib/src/icons/secondary_icons';\nexport const _frontmatter = {\n  \"title\": \"Component Properties\",\n  \"draft\": false,\n  \"order\": 6\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Component Properties`}</h1>\n    <p>{`Every `}<a parentName=\"p\" {...{\n        \"href\": \"/uilib/components\"\n      }}>{`Component`}</a>{` has its own `}<inlineCode parentName=\"p\">{`properties`}</inlineCode>{` to make them work for a variety of cases. You may have a look at the table describing all the possibilities. Check out for example the `}<a parentName=\"p\" {...{\n        \"href\": \"/uilib/components/button#info\"\n      }}>{`Button Properties`}</a>{`.`}</p>\n    <p>{`Below are some examples. You can even modify them right away in the Browser.`}</p>\n    <h2>{`Large Buttons & Icons`}</h2>\n    <ComponentBox mdxType=\"ComponentBox\">\n      {`\n<Button\n  variant=\"secondary\"\n  text=\"Secondary Button\"\n  icon=\"chevron_right_medium\"\n  size=\"large\"\n/>\n<Button\n  icon=\"chevron_right\"\n  icon_size=\"medium\"\n  size=\"large\"\n/>\n`}\n    </ComponentBox>\n    <h2>{`Extended example`}</h2>\n    <ComponentBox scope={{\n      hamburgerIcon\n    }} useRender mdxType=\"ComponentBox\">\n      {`\nconst Wrapper = styled.div\\`\n  .dnb-button {\n    --button-width: 4rem;\n    --button-height: 4rem;\n    --button-border-radius: 2rem;\n    svg {\n      color: fuchsia;\n    }\n  }\n\\`\nconst myHandler = () => alert('Hello')\nrender(\n  <Wrapper>\n    <Button\n      variant=\"secondary\"\n      icon={hamburgerIcon}\n      size=\"default\"\n      on_click={myHandler}\n    />\n    <Button\n      variant=\"secondary\"\n      size=\"default\"\n      on_click={myHandler}\n    >\n      <Icon icon={hamburgerIcon} />\n    </Button>\n  </Wrapper>\n)\n`}\n    </ComponentBox>\n    <h2>{`Web Components and properties`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`What if a property has to change at runtime?`}</p>\n    </blockquote>\n    <p>{`Changing a property (`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`) at runtime is a common thing in React. But also `}<inlineCode parentName=\"p\">{`dnb-ui-lib`}</inlineCode>{` web components support `}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{` changes.\nKeep in mind that not all components are tested to the last detail.\nSo, if you come over some special use cases, please contribute back and make a pull request.`}</p>\n    <ComponentBox useRender mdxType=\"ComponentBox\">\n      {`\nconst Component = () => {\n  const time = new Date().toLocaleTimeString()\n  return (\n    <>\n      <dnb-form-label for_id=\"form-input\">\n        Web Component property updates\n      </dnb-form-label>\n      <dnb-input id=\"form-input\" value={time} />\n    </>\n  )\n}\nconst RenderHelper = () => {\n  useEffect(() => {\n    const timer = setInterval(() => render(<RenderHelper />), 1e3)\n    return () => clearInterval(timer)\n  }, [])\n  return <Component />\n}\nrender(<RenderHelper />)\n`}\n    </ComponentBox>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}