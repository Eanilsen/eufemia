{"version":3,"sources":["webpack:///./src/pages/uilib/usage/customisation/theming.md"],"names":["_frontmatter","title","draft","order","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_8__","_extends","mdxType","parentName","href","className","isMDXComponent"],"mappings":"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","file":"component---src-pages-uilib-usage-customisation-theming-md-3688fc31d42bfd6f1332.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Theming\",\n  \"draft\": false,\n  \"order\": 5\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Theming`}</h1>\n    <p>{`Read the `}<a parentName=\"p\" {...{\n        \"href\": \"/uilib/usage/customisation/styling\"\n      }}>{`Styling examples`}</a>{` on how to include styles and a theme.\nThis section is about how theming works and how to actually create a custom theme.`}</p>\n    <h2>{`How Themes are built`}</h2>\n    <p>{`By default, all the HTML Elements (components) are built by separating the \"visual styling\" parts from the \"functional layout\" parts. This way we can create new custom visual styles.`}</p>\n    <p>{`Of course, we can still overwrite the functional layout properties to customize our theme even further.`}</p>\n    <p>{`The included themes are built using SASS. Simply because we can reuse the `}<em parentName=\"p\">{`@mixin`}</em>{`'s and variables from SASS.`}</p>\n    <p>{`We have the `}<strong parentName=\"p\">{`Main Theming File`}</strong>{`, which is located here: `}<inlineCode parentName=\"p\">{`dnb-ui-lib/src/style/themes/dnb-theme-[THEME].scss`}</inlineCode></p>\n    <p>{`From here, we \"can\" reuse some default theming mechanism, just to have a fallback:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@import '../theme-ui/dnb-theme-ui.scss';\n`}</code></pre>\n    <p>{`All the additional sub theming files (for every component) are automatically added to the `}<strong parentName=\"p\">{`Main Theming File`}</strong>{` by running `}<inlineCode parentName=\"p\">{`$ yarn build`}</inlineCode>{`. More on that further down.`}</p>\n    <p>{`If we need a custom theming file for one or more components, we can do so by creating `}<inlineCode parentName=\"p\">{`dnb-ui-lib/src/components/[COMPONENT]/style/dnb-button-theme-[THEME].scss`}</inlineCode>{`.`}</p>\n    <h2>{`Local Theming setup`}</h2>\n    <p>{`There are several solutions to `}<strong parentName=\"p\">{`create a new theme`}</strong>{`.\nOne of which is by using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/lang/en/docs/cli/link/\"\n      }}>{`linking feature of Yarn`}</a>{`.`}</p>\n    <h3><em parentName=\"h3\">{`Method:`}</em>{` yarn link and SASS`}</h3>\n    <p>{`Make sure Your project can handle `}<strong parentName=\"p\">{`*`}{`.scss`}</strong>{` files.`}</p>\n    <p><strong parentName=\"p\">{`1.`}</strong>{` make a copy of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dnbexperience/eufemia\"\n      }}>{`repository`}</a>{`. Place it somewhere locally on your machine`}</p>\n    <p><strong parentName=\"p\">{`2.`}</strong>{` change your command line (Terminal) directory to the sub package `}<inlineCode parentName=\"p\">{`dnb-ui-lib`}</inlineCode>{` (`}<em parentName=\"p\">{`eufemia/packages/dnb-ui-lib`}</em>{`)`}</p>\n    <p><strong parentName=\"p\">{`3.`}</strong>{` make the package ready for development by running:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn install && yarn build && yarn link\n`}</code></pre>\n    <p><strong parentName=\"p\">{`4.`}</strong>{` on your application root directory, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn link \"dnb-ui-lib\"\n`}</code></pre>\n    <p><strong parentName=\"p\">{`5.`}</strong>{` That's it. Now you can use (import/require) the NPM module in your application like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Button } from 'dnb-ui-lib/components'\nimport 'dnb-ui-lib/style/components'\n\n// See the \"src\" in the path?\nimport 'dnb-ui-lib/src/style/themes/dnb-theme-[MY THEME].scss'\n`}</code></pre>\n    <p><strong parentName=\"p\">{`6.`}</strong>{` Don't forget to add `}<inlineCode parentName=\"p\">{`\"dnb-ui-lib\": \"*\"`}</inlineCode>{` with the respective version (alongside React) to your dependencies:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  \"dependencies\": {\n    \"dnb-ui-lib\": \"*\",\n    \"react\": \"^16\",\n    \"react-dom\": \"^16\",\n    ...\n  }\n`}</code></pre>\n    <p><strong parentName=\"p\">{`7.`}</strong>{` `}<em parentName=\"p\">{`Note:`}</em>{` Every time you create a new theme file, you have to run `}<inlineCode parentName=\"p\">{`yarn build`}</inlineCode>{` again. This way the new theme file gets added/bundled to the `}<strong parentName=\"p\">{`Main Theming File`}</strong>{`.`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}