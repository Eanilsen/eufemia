{"version":3,"sources":["webpack:///./src/pages/uilib/usage/best-practices/for-testing.md"],"names":["_frontmatter","title","menuTitle","status","draft","order","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_8__","_extends","mdxType","parentName","isMDXComponent"],"mappings":"gzBAKO,IAAMA,EAAe,CAC1BC,MAAS,6BACTC,UAAa,cACbC,OAAU,MACVC,OAAS,EACTC,MAAS,GAQLC,EAAc,CAClBN,gBAEIO,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,EAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,IAAAD,CAACN,EAADQ,EAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EH,OAAAC,EAAA,IAAAD,CAAA,mCACAA,OAAAC,EAAA,IAAAD,CAAA,6OAEAA,OAAAC,EAAA,IAAAD,CAAA,2CACAA,OAAAC,EAAA,IAAAD,CAAA,oIACAA,OAAAC,EAAA,IAAAD,CAAA,8RACAA,OAAAC,EAAA,IAAAD,CAAA,4BACAA,OAAAC,EAAA,IAAAD,CAAA,UACEA,OAAAC,EAAA,IAAAD,CAAA,MAAII,WAAW,MAAf,2BAAgDJ,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,MAAnB,UAAhD,yDACAJ,OAAAC,EAAA,IAAAD,CAAA,MAAII,WAAW,MAAf,4BAAiDJ,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,MAAnB,YAAjD,iHACAJ,OAAAC,EAAA,IAAAD,CAAA,MAAII,WAAW,MAAf,2DAAgFJ,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,MAAnB,aAAhF,0CAEFJ,OAAAC,EAAA,IAAAD,CAAA,+BACAA,OAAAC,EAAA,IAAAD,CAAA,2TAEAA,OAAAC,EAAA,IAAAD,CAAA,yHAAoHA,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,OAApH,QAA4KJ,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA5K,KACAJ,OAAAC,EAAA,IAAAD,CAAA,gCACAA,OAAAC,EAAA,IAAAD,CAAA,8OACAA,OAAAC,EAAA,IAAAD,CAAA,gKAIJL,EAAWU,gBAAiB","file":"component---src-pages-uilib-usage-best-practices-for-testing-md-7a93b9e404458c3176a2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Best Practices for testing\",\n  \"menuTitle\": \"for testing\",\n  \"status\": \"wip\",\n  \"draft\": false,\n  \"order\": 3\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Testing Frontend Code`}</h1>\n    <p>{`It is a good idea to include some tips and tricks for frontend testing\nSince accessibility and user experience are major factors in any design system, it may be sensible to include some tips and tricks for frontend testing.`}</p>\n    <h2>{`Write tests, but not too many`}</h2>\n    <p>{`That said, write tests to gain confidence that your code is strong for both refactoring, enhancements and new features.`}</p>\n    <p>{`Frontend code is changing and moving fast. So 100% code coverage should never be a goal by itself, rather try to make tests which reflect what the end-user would do. By doing so, you will probably cover several internal functions and states by simulating a \"click\" anyways.`}</p>\n    <h3>{`Static testing`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Use static testers like `}<strong parentName=\"li\">{`ESLint`}</strong>{` (also in your editor of choice) to detect typos etc.`}</li>\n      <li parentName=\"ul\">{`Use code formatters like `}<strong parentName=\"li\">{`Prettier`}</strong>{` to uniform code style. This makes working together so much more fun and makes your everyday more productive.`}</li>\n      <li parentName=\"ul\">{`Like ESLint, there is also a linter for styling, called `}<strong parentName=\"li\">{`StyleLint`}</strong>{`. It works even on styled components.`}</li>\n    </ul>\n    <h3>{`Integration tests`}</h3>\n    <p>{`Do not write unit tests in frontend code. But make integration tests.\nThink as a user. Think how the user will interact with your application. Do not shallow test, but test components like a user would get it (use mount or render to also test their children, cause a user would do have these as well).`}</p>\n    <p>{`There are several packages you can integrate in your test, so your can test your code for accessibility e.g. `}<inlineCode parentName=\"p\">{`axe`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`pa11y`}</inlineCode>{`.`}</p>\n    <h3>{`End-to-end testing`}</h3>\n    <p>{`Having tests which actually run in a browser, makes a lot of sense in frontend code. This method of testing is good to gain confidence and ensure a flow of interactions is working correctly - like a user registration process.`}</p>\n    <p>{`Of course, end-to-end tests can be run on a CI server as well. Make sure you run your tests against a production-like version of your application.`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}