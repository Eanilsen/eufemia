{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Accessibility"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Accessibility`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `WCAG 2.1 and UU`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Make sure Your Web Applications are `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://uu.difi.no\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"a\"\n    }, `UU`)), ` and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.w3.org/TR/WCAG21/\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"a\"\n    }, `WCAG 2.1`)), ` compliant. This means, You as a developer has to:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `follow semantics properly`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `use different `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `screen readers`), ` and test `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/accessibility/screenreader\"\n      }\n    }, `regularly`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `make sure, everything is `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/layout#web-applications\"\n      }\n    }, `responsive`), ` - use mostly the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `rem`), ` `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/best-practices/for-styling#units\"\n      }\n    }, `unit`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `define the tab navigation and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/accessibility/focus#managing-the-focus-state\"\n      }\n    }, `focus management`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `have a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/accessibility/focus#skip-link\"\n      }\n    }, `Skip Link`), ` in place`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `properly use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `for=\"#id\"`), ` attribute on `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#Attributes\"\n      }\n    }, `labels`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `make good use of `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `area-label`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `aria-hidden`), `, e.g. of `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/usage/accessibility/icons#decorative-icons\"\n      }\n    }, `decorative content`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `have `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `aria-live`), ` in place for dynamic content`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `hide \"hidden\" content with `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `display: none;`), ` or remove the markup entierly (like React States)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `allow zooming in web pages. Example:`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=yes\"\n/>\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Tooling tips`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://eslint.org\"\n      }\n    }, `ESLint`), ` with `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/eslint-plugin-jsx-a11y\"\n      }\n    }, `eslint-plugin-jsx-a11y`), ` in Your Code Editor setup.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `axe`), ` in `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/best-practices/for-testing#integration-tests\"\n      }\n    }, `integration tests`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are several integrations for Developer Tools, including `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.deque.com/axe/\"\n      }\n    }, `axe-core`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Testing semantics is never enough, use actually `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/accessibility/screenreader\"\n      }\n    }, `screen readers`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `HTML Accessibility`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are many good Articles about accessibility for web standards out there. Start with the one from `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML\"\n      }\n    }, `Mozilla Documentation`)));\n  }\n\n}"}}},"pageContext":{"id":"8bfc18ee-2eaf-5168-ae6d-b157e99a40e8"}}