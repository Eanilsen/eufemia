{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Naming Conventions"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Naming conventions (Designers)`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `Persist the same component name throughout design, code and conversation`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `Nathan Curtis`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Naming space`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Naming Colors`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Eufemia FTW uses a simple hypenated naming structure - no camelCase. Android and iOS use camelCse, dots and underscores`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Colors have a naming convention across all platforms and formats. Please refer to the table in 'colors' section (link).`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Naming Design files`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We don't have a naming convention for design files in Figma. However, it is encouraged to name your design file frames and interface designs with clear logical names in english.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Figma files`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Figma Symbols`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Figma frames`));\n  }\n\n}"}}},"pageContext":{"id":"06b58b4a-c75b-5706-b386-51b04b048539"}}