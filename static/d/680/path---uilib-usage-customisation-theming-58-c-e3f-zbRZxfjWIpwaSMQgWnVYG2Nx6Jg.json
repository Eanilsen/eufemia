{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Theming"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"Theming\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Read the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/styling\"\n        }\n      }, \"Styling examples\"), \" on how to include styles and a theme.\\nThis section is about how theming works and how to actually create a custom theme.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"How Themes are built\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"By default, all the HTML Elements (components) are built by separating the \\\"visual styling\\\" parts from the \\\"functional layout\\\" parts. This way we can create new custom visual styles.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Of course, we can still overwrite the functional layout properties to customize our theme even further.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The included themes are built using SASS. Simply because we can reuse the \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"@mixin\"), \"'s and variables from SASS.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"We have the \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"Main Theming File\"), \", which is located here: \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib/src/style/themes/dnb-theme-[THEME].scss\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"From here, we \\\"can\\\" reuse some default theming mechanism, just to have a fallback:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-scss\"\n        }\n      }, \"@import '../theme-ui/dnb-theme-ui.scss';\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"All the additional sub theming files (for every component) are automatically added to the \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"Main Theming File\"), \" by running \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"$ yarn build\"), \". More on that further down.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"If we need a custom theming file for one or more components, we can do so by creating \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib/src/components/[COMPONENT]/style/dnb-button-theme-[THEME].scss\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Local Theming setup\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"There are several solutions to \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"create a new theme\"), \".\\nOne of which is by using the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://yarnpkg.com/lang/en/docs/cli/link/\"\n        }\n      }, \"linking feature of Yarn\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"h3\"\n      }, \"Method:\"), \" yarn link and SASS\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Make sure Your project can handle \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"*\", \".scss\"), \" files.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"1.\"), \" make a copy of the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://github.com/dnbexperience/eufemia\"\n        }\n      }, \"repository\"), \". Place it somewhere locally on your machine\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"2.\"), \" change your command line (Terminal) directory to the sub package \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \" (\", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"eufemia/packages/dnb-ui-lib\"), \")\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"3.\"), \" make the package ready for development by running:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        }\n      }, \"$ yarn install && yarn build && yarn link\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"4.\"), \" on your application root directory, run:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        }\n      }, \"$ yarn link \\\"dnb-ui-lib\\\"\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"5.\"), \" That's it. Now you can use (import/require) the NPM module in your application like:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        }\n      }, \"import { Button } from 'dnb-ui-lib/components'\\nimport 'dnb-ui-lib/style/components'\\n\\n// See the \\\"src\\\" in the path?\\nimport 'dnb-ui-lib/src/style/themes/dnb-theme-[MY THEME].scss'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"6.\"), \" Don't forget to add \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"\\\"dnb-ui-lib\\\": \\\"*\\\"\"), \" with the respective version (alongside React) to your dependencies:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-json\"\n        }\n      }, \"  \\\"dependencies\\\": {\\n    \\\"dnb-ui-lib\\\": \\\"*\\\",\\n    \\\"react\\\": \\\"^16\\\",\\n    \\\"react-dom\\\": \\\"^16\\\",\\n    ...\\n  }\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"7.\"), \" \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"Note:\"), \" Every time you create a new theme file, you have to run \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"yarn build\"), \" again. This way the new theme file gets added/bundled to the \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"Main Theming File\"), \".\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"28bc3125-ce40-5c46-8d11-65f126f7c3fe"}}