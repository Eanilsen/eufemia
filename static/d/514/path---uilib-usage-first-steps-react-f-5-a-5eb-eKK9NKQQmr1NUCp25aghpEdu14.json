{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"React"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `React JS for the web`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The most basic way to use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` is like this:`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Basic Buttons`), React.createElement(ComponentBox, null, `\n<Button text=\"Basic Button\" />\n`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Large Buttons & Icons`), React.createElement(ComponentBox, null, `\n<>\n  <Button\n    variant=\"secondary\"\n    text=\"Secondary Button\"\n    icon=\"chevron_right_medium\"\n    size=\"large\"\n  />\n  <Button\n    icon=\"chevron_right\"\n    icon_size=\"medium\"\n    size=\"large\"\n  />\n</>\n`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Extended example`), React.createElement(ComponentBox, {\n      scope: {\n        hamburgerIcon\n      },\n      noInline: true\n    }, `\n// import { Button, Icon } from 'dnb-ui-lib'\n// import { hamburger as hamburgerIcon } from 'dnb-ui-lib/icons/secondary_icons'\nconst Wrapper = styled.div\\`\n  .dnb-button {\n    --button-width: 4rem;\n    --button-height: 4rem;\n    --button-border-radius: 2rem;\n    svg {\n      color: fuchsia;\n    }\n  }\n\\`\nconst myHandler = () => alert('Hello')\nrender(\n  <Wrapper>\n    <Button\n      variant=\"secondary\"\n      icon={hamburgerIcon}\n      size=\"default\"\n      on_click={myHandler}\n    />\n    <Button\n      variant=\"secondary\"\n      size=\"default\"\n      on_click={myHandler}\n    >\n      <Icon icon={hamburgerIcon} />\n    </Button>\n  </Wrapper>\n)\n`));\n  }\n\n}"}}},"pageContext":{"id":"c6ed4c25-9872-5b19-b2b8-ab7622c94014"}}