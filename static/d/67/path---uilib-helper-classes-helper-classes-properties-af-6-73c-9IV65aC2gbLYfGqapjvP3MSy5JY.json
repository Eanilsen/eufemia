{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":null},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"table\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"thead\",\n        components: components,\n        parentName: \"table\"\n      }, React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"thead\"\n      }, React.createElement(MDXTag, {\n        name: \"th\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Selector\"), React.createElement(MDXTag, {\n        name: \"th\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Description\"))), React.createElement(MDXTag, {\n        name: \"tbody\",\n        components: components,\n        parentName: \"table\"\n      }, React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-section\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Wraps content inside a visual section banner. Use additionally \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-section--content\"), \" to get the default padding inside\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-core-style\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"In order to be able to have the core Body Style inside a wrapper and available for all its children. The Body Style contains among others stlyes, both the correct line-height and a CSS reset.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-app-content-inner\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Adds simply a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"overflow:hidden\"), \" to cut everything outside of our \\\"content-inner\\\"\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-tab-focus\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Removes default focus outline from a focusable element and adds a custom visual focus state when is focused by a tab key. There is also: \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-mouse-focus\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-focus-ring\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-no-focus\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-form-group\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Use it to wrap forms elements vertically or horizontally. This is not meant for production forms. But more for a small and quick solution to get labels and form elements aligned nicely. There is also, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-form-group__position--vertical\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-form-group__position--horizontal\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-skip-link\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"A default Skip Link style. More details in the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"td\",\n        props: {\n          \"href\": \"/uilib/usage/accessibility/focus#skip-link\"\n        }\n      }, \"Focus Secion\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-spacing\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Default spacing styles. More details in \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"td\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/styling#spacing\"\n        }\n      }, \"Styling\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-sr-only\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Visually hides an element, but is still reachable by screen readers. (\", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"sr\"), \" stands for \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"Screen Reader\"), \")\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-not-sr-only\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"The opposite of \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-sr-only\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-unstyled-list\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Removes default styling for lists. Applies to the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"ul\"), \" or \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"ol\"), \" elements\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-hide-on-mobile\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Hides element on screens that are below the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"medium\"), \" size. This value of \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"medium\"), \" can be found in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"css/core/utilities.scss\"))), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-mobile-exclusive\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"The opposite of \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-hide-on-mobile\"), \", which means it will only be visible on screens up to the size of `medium\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-width-limit\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Our main wrapping class for containers. It has a max-width and a left and right padding which varies based on screen sizes\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-belt\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"A wrapping class which adds a background color and padding to top and bottom\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"dnb-nudge\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"A visual nudging tool. It has a modifying class which tells the element if it should expand horizontally or vertically. \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"td\"\n      }, \"NB! Use with caution!\"))))), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"More about \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"h3\"\n      }, \"dnb-app-content-inner\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Use this class where a style is trying to add background or a lines to the very outer side of the page. e.g. Tabs are using this technique\\nIn some cases we don't want to have that effect. For instance, if we have a menu (\", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"aside\"), \") to the left or right side.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"More about \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"h3\"\n      }, \"dnb-nudge\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"It also has a data attribute which takes the amount of nudges. One nudge = \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"1rem\"), \", two nudges = \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"3rem\"), \". It takes up to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"10 nudges\"), \". See example for usage.\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ddf5322f-54dd-5a39-9980-c8cd99b6741b"}}