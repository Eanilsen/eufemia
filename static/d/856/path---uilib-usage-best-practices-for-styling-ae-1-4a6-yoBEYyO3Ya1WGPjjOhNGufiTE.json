{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Best Practices for styling","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Styling`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `CSS is easy. Everyone is thinking at least that in the first place. Cause You get not forced to make things right - so it fells like an endless freedom. But actually, this is a kind of trap.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `It is VERY important to do CSS right from the very beginning.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You will else find Yourself making a fix of a fix, and so on. Also, refactoring and enhancements will often effect code deeper down as well.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Structure`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To write more structured and uniform CSS code, stick with the following approach:`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `start the most influential and important properties first then work progressively toward aesthetics and motion effects.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `leave one empty line between these groups`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This helps coworkers quickly find and understand the sentence and meaning of the CSS code.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Example structure of CSS`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `.my-selector {\n  /* 1. Layout */\n  position: relative;\n  z-index: 1;\n  display: block;\n\n  /* 2. Sizes & Spaces */\n  width: 0.5em;\n  height: 0.5em;\n  padding: 1em; /* Will be the same as our local font-size of 1.5rem */\n\n  /* 3. Fonts & Typography */\n  font-family: var(--font-family-default);\n  font-weight: var(--font-weight-default);\n  font-size: 1.5rem;\n  color: var(--color-sea-green);\n\n  /* 4. Styling */\n  border: 1px solid var(--color-mint-green); /* Use Pixel for borders. They don't need to be dynamic */\n  opacity: 1;\n\n  /* 5. Animations */\n  transition: opacity 0.2s linear;\n}\n`)));\n  }\n\n}"}}},"pageContext":{"id":"9fd751d7-1292-57f1-b716-cb86b5e20628"}}