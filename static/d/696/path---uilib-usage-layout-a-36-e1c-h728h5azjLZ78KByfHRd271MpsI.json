{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Layout"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Layout`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To lower the barrier of using Eufemia or the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` - the UX Team at DNB has decided to not force the usage of a dedicated layout system. Although, this may change in future.\nThis gives projects much more freedom of thinking new and creating more exciting layouts.\nThis also lowers the time to get started and the learning curve.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Grid`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Anyhow, there is already today a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/patterns/grid\"\n      }\n    }, `Grid Pattern with CSS helpers`), ` You can use.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Spacing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Eufemia has a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/quickguide-designer/spatial-system\"\n      }\n    }, `Spatial System`), ` with a grid of `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `8px`), `.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Web Applications`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In short, only use `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `rem`), ` for layouts and spacing. So, make sure ...`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `You always use the nearest half `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `rem`), ` value, like `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `0.5rem`), `, `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `1rem`), ` or `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `1.5rem`), ` and so forth.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `You always get a `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `total computed height`), ` within the grid.`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Responsibility`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If You are working together with an DNB UX Designer, You can decide freely what layout mechanism You want to use. For Web Applications we mainly use `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `CSS Flexbox`), ` or `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `CSS Grid`), `. But it is Your responsibility to ensure 100% consistency and compatibility.`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"67bebd8a-e832-506e-b50a-a19fba7a7010"}}