{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Commit","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Commit`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Make sure You follow `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"strong\",\n      props: {\n        \"href\": \"https://semver.org\"\n      }\n    }, `Semantic Versioning`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Version numbers are handled automatically by using `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/semantic-release/semantic-release#readme\"\n      }\n    }, `semantic-release`), `.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Commit Messages`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Make sure to decorate Your `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `commit messages`), ` with either `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/semantic-release/semantic-release#commit-message-format\"\n      }\n    }, `commit message format`), ` or simply use the following three methods:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `major: breaking change in API`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `minor: this is a new feature`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `fix: an example fix message`))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Committing changes`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `During a commit (locally), Your commit content (code) will be tested with both Static and Integration tests. You may run `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn test`), ` or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn test:update`), ` before You try to commit. You may also write new tests for Your code before committing.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The Code Base is based on several Static Tests to help the code to be uniform:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Prettier`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `ESLint`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `StyleLint`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You may consider to install Plugins for You Editor of choice - to visualize and run the code formatters and linters based on the given config files. This way You can immediately see how the code will and have to consist.`));\n  }\n\n}"}}},"pageContext":{"id":"d66881df-b632-58a4-ac1c-ef6f9d24b0ae"}}