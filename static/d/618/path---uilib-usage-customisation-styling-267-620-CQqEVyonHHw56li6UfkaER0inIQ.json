{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Styling","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Styling`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The CSS is a compiled and minified version. You find it here: `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib/style/dnb-ui-lib.min.css`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `For Node based environments`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `To include the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` styles (except patterns), do this:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `// This also includes the default DNB UI Theme\nimport 'dnb-ui-lib/style'\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If You want to import the styles of all components - `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `without`), ` the default DNB UI Theme:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `// No Theme is included\nimport 'dnb-ui-lib/style/components'\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You may ant to import a theme as well:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `// Default DNB UI Theme\nimport 'dnb-ui-lib/style/theme'\n\n// ... is equivalent to the default theme\nimport 'dnb-ui-lib/style/themes/ui'\n\n// ... or some other theme\nimport 'dnb-ui-lib/style/themes/[NAME].css'\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You also can import a single style of a single component:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `import 'dnb-ui-lib/components/button/style'\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You may have a look at the guides about `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/quickguide-designer/colors/\"\n    }\n  }, `colors`), ` and `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/quickguide-designer/fonts/#fonts-to-show-code\"\n    }\n  }, `fonts`), `.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Fonts to show Code`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `<Code>`), ` snippets shows best on a `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `Monotype`), ` font. Developers will normally have installed some of these fonts on their devices. Example of CSS `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `font-family`), ` usage:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-css\",\n      \"metastring\": \"\"\n    }\n  }, `font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier,\n  monospace;\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Read more about `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/quickguide-designer/fonts/\"\n    }\n  }, `fonts at DNB`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Best Practice`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `To write more structured and uniform CSS code, stick with this approach to write the most influential and important properties first. Have simply a newline between the blocks respective groups.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Example of how to structure the DNB CSS`)), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-css\",\n      \"metastring\": \"\"\n    }\n  }, `.my-selector {\n  /* 1. Layout */\n  position: relative;\n  z-index: 1;\n  display: block;\n\n  /* 2. Sizes & Spaces */\n  width: 0.5em;\n  height: 0.5em;\n  padding: 1em; /* Will be the same as our local font-size of 1.5rem */\n\n  /* 3. Font & Typography */\n  font-family: 'Fedra Sans Std';\n  font-size: 1.5rem;\n  color: var(--color-sea-green);\n\n  /* 4. Styling */\n  border: 1px solid var(--color-mint-green); /* Use Pixel for borders. They don't need to be dynamic */\n  opacity: 1;\n\n  /* 5. Animations */\n  transition: opacity 0.2s linear;\n}\n`)));\n});"}}},"pageContext":{"id":"e931c079-c267-51f5-8b96-3729d71186fc","absPath":"/Users/travis/build/dnbexperience/eufemia/packages/dnb-design-system-portal/src/pages/uilib/usage/customisation/styling.md","tableOfContents":{"items":[{"url":"#styling","title":"Styling","items":[{"url":"#for-node-based-environments","title":"For Node based environments"},{"url":"#fonts-to-show-code","title":"Fonts to show Code"},{"url":"#best-practice","title":"Best Practice"}]}]}}}