{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Icons Introduction"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `At DNB we are currently using Streamline icons as our source for off-the-shelf vector icons.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.streamlineicons.com/\"\n      }\n    }, `Link to streamlineicons.com`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Using Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The icons are in SVG format and are optimized for performance and to have the smallest footprint possible in the package build process.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The sources are located in the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://unpkg.com/dnb-ui-lib@latest/assets/icons/\"\n      }\n    }, `assets folder`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `They also exists as `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components/icon\"\n      }\n    }, `React Components`), ` to be easily integrated, without need of an additional SVG file loader.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Color`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The icons SVG format have to satisfy the requirement to colorize the CSS fill- and stoke colors by simply using the inherited color.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is taken care of by using the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components/icon\"\n      }\n    }, `DNB Icon Component`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Example usage of CSS`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `svg {\n  color: inherit;\n  fill: currentColor;\n  stroke: currentColor;\n}\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Sizing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Eufemia icons come in `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `two`), ` sizes:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `Default Size`), ` 16px with 1.5px stroke weight`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `Medium Size`), ` 24px with 1.5px stroke weight`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The reason why there are two sizes, is mainly do to the SVG artifact, that the Icons, alongside with the strokes, will scale up, once we use them with a larger width and height.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Scalability in web`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To ensure that the relative size of the SVG icons are scalable by the inherited CSS font size, do not explicitly specify the SVG, unless for older browsers like Internet Explorer.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Example usage of CSS`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `svg {\n  font-size: inherit;\n  width: 1em;\n  height: 1em;\n}\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Spacing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Icons should have a minimum area of 8px between them and their nearest neighbor.`), React.createElement(\"div\", {\n      className: \"image-box\"\n    }, React.createElement(Img, {\n      src: IconNearestNeighbour,\n      caption: \"Icons with nearest neighbour 8px distance\",\n      alt: \"Icon's nearest neighbour\",\n      height: \"136\"\n    })), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Custom Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.streamlineicons.com/\"\n      }\n    }, `Streamline`), ` caters for pretty much all of Eufemia's icon needs. However, sometimes there is a need for a custom icon. In these cases please contact one of Eufemia's `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/design-system/contact\"\n      }\n    }, `design leads`), `.`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"50eb41db-bb57-599c-8a9c-20abf3e9ac7f"}}