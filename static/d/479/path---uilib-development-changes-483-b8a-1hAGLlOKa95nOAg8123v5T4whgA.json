{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Make Changes"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Making changes`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Get started on making new Components and Patterns`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In the repo `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` you will find the directory `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `/src/components`), ` or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `/src/patterns`), `. There you can place a new directory with all the necessary sub folders. As a reference, take a look how the other `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `components`), ` and `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `patterns`), ` are set up.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Next, we need to `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `pre-publish`), ` the library locally, so we can check the building process and test our changes locally by using `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn build`), ` again.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To use the local build, you can either run the portal, or use `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn link`), ` to link the package with a totally different project.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Besides that, you can also use Storybook. Inside `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), `, run `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn story`), ` to start the server.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `It is recommended that you make a new branch to isolate your work before it gets merged into the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `origin/develop`), ` branch.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-bash\"\n      }\n    }, `# Make a Feature branch\n$ git checkout -b ftr/my-feature\n\n# - or a Working In Progress branch\n$ git checkout -b wip/working-on-it\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `What happens on calling `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"h3\"\n    }, `yarn build`), `?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are a lot of different things going on, like:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Assets are getting generated`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `All the lib code gets compiled down to ECMAScript 5.1`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `UMD bundle gets created`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `All SASS styles are validated and compiled`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Code gets minified`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Icons are getting converted`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A couple of folders and files are generated in the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` root. They are ignored in the .gitignore file, so they not get a part of the git repo.`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"444e231f-aaa7-5224-bca9-72b7bdd51a96"}}