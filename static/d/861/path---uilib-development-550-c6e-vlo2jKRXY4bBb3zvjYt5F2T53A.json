{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Development"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Development`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` uses a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://nodejs.org\"\n      }\n    }, `Node.js`), ` based setup with a lot of auto generated code to make the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://reactjs.org\"\n      }\n    }, `React`), ` based components and patterns.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Repository`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/dnbexperience/eufemia\"\n      }\n    }, React.createElement(Icon, {\n      icon: GithubLogo,\n      size: \"default\"\n    }), ` Eufemia at GitHub`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Install the repo locally on Your machine`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-bash\"\n      }\n    }, `# Clone the repo into your project working directory\n\\$ git clone https://github.com/dnbexperience/eufemia.git\n\n# Change to the directory\n\\$ cd eufemia\n\n# Change to the latest and most up to date Branch\n\\$ git checkout develop\n\n# And install the dependencies\n\\$ yarn install\n\n# Once the installation is done, create a local build\n\\$ yarn build\n\n# Optionally, run the portal locally in watch mode (http://localhost:8000)\n\\$ yarn start\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Why Yarn and not Lerna?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The mono repo `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-design-system`), ` uses `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://yarnpkg.com/\"\n      }\n    }, `Yarn`), ` (>= v1.10.1) to maintain the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://yarnpkg.com/en/docs/workspaces\"\n      }\n    }, `workspace functionality`), `. Instead of using `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `npm link`), ` or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn link`), `, we use packages. This simplifies the linking. and shared modules between `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://docs.npmjs.com/getting-started/packages\"\n      }\n    }, `packages`), `.\nYarn offers a simpler approach to workspaces, but is way more powerful in managing dependencies.`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"effa0521-7cbe-5fd4-a20a-6eef3831abfc"}}