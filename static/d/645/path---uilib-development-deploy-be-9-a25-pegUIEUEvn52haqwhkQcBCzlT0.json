{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Deploy","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Deploy`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Publishing new versions to the NPM Package (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), `) is handled by a Deploy Server.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `CI Structure`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Actually, both the Portal (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-design-system-portal`), `) and the NPM Package (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), `) are deployed and build by a Continuous Integration (CI) Server.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Once You push Your branch `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ftr/your-feature`), ` (or what ever) to remote `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `origin`), `, all tests will be run against Your latest pushes.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Merges from a Pull Request and other pushes to the development branch `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `origin/develop`), `, will trigger a `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `test build`), ` of the Portal. This way me make sure that a new Portal version can be build, before we actually publish a new build.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `The Master Branch`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Make sure You only make Pull Request from `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `origin/develop`), ` into `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `origin/master`), `.\nThe Master Branch is more kind of a `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `slave branch`), `. It reflects the latest version, but is actually only used to publish new versions and to make builds for the Portal.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `TODO:`), ` GitFlow and CI structure graphics`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Steps to follow`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The steps, from code changes to production builds are:`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Make Your changes and write tests and test the codebase`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Update eventually snapshots (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `yarn test:update`), `)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Commit Your changes with the correct `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"strong\",\n      props: {\n        \"href\": \"/eufemia/uilib/development/commit\"\n      }\n    }, `message decoration`))), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Push or make a Pull Request to the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `origin/develop`), ` branch`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Wait until the CI Server has validated the commits`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Make a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/dnbexperience/eufemia/compare/master...develop?expand=1\"\n      }\n    }, `Pull Request`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Once the Pull Request will be approved by one of the authored `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/dnbexperience/eufemia/graphs/contributors\"\n      }\n    }, `repo contributors`), `,`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `The CI Server will deploy the Portal and NPM builds`)));\n  }\n\n}"}}},"pageContext":{"id":"9db2c443-9311-5bf4-9b5c-f77add038315"}}