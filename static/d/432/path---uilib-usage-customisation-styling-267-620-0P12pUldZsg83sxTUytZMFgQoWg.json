{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"CSS Styles"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `CSS Styles`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To ensure flexibility and the possibility of `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/customisation/theming\"\n      }\n    }, `theming`), `, the DNB CSS Styles area build in a bottom up manner.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles are decoupled from the functional `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `components`), `.\nThere are several Packages You can use.`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-core`), ` - Includes the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `DNB Main Style`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-components`), ` - Includes all the styles for the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `components`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-patterns`), ` - Includes all the styles for the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/patterns\"\n      }\n    }, `patterns`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-theme-ui`), ` - Includes both the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `DNB Main Theme`), ` (`, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `inkl. HTML elements`), `) and themes for every `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `component`), `.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All the CSS packages are ready to use, minified CSS files. You will find the main style here, like: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/style/dnb-ui-core.min.css`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Additionally, it is also possible to import a style and theme for every single component separately. You find the styles here, like: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/components/[button]/style/dnb-button.min.css`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following Diagram gives an overall overview how the packages are structured.`), React.createElement(CSSDiagram, null), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You may have a look at the guides about `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/typography\"\n      }\n    }, `Typography`), `.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Spacing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To ensure more flexibility, all the margins / spacings are reset to zero. But more often we have to have a by default defined e.g. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `margins`), ` on HTML Elements like headings or paragraphs.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To use the default DNB spacings, You can define a CSS class called: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-spacing`), `\nEverything inside this container will then have a default spacing. This will be specially helpful for article alike pages.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<div class=\"dnb-spacing\">\n  <!-- DNB spacings -->\n  <h1>e.g. I have now a margin</h1>\n  <p>‚òùüèª Me as well</p>\n</div>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles for the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-spacing`), ` are included in the package: `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-theme-ui`)));\n  }\n\n}"}}},"pageContext":{"id":"bdcdbecf-e4f8-54a3-a3a4-831730b26dce"}}