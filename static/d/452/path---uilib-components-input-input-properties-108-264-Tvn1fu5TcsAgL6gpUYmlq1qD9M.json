{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":null},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"table\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"thead\",\n        components: components,\n        parentName: \"table\"\n      }, React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"thead\"\n      }, React.createElement(MDXTag, {\n        name: \"th\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Properties\"), React.createElement(MDXTag, {\n        name: \"th\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, \"Description\"))), React.createElement(MDXTag, {\n        name: \"tbody\",\n        components: components,\n        parentName: \"table\"\n      }, React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"id\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(mandatory)\"), \" the \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"td\"\n      }, \"id\"), \" attribute of the input element\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"value\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" the content value of the input.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"label\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" prepends the Form Label component. If no ID is provided, a random ID is created. input.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"status\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" text with a status message. The style defaults to an error message.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"status_state\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" defines the state of the status. Currently are two statuses \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"[error, info]\"), \". Defaults to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"error\"), \".\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"placeholder\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" the placeholder witch shows up once the input value is empty\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"input_class\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" in case we have to set a custom input class.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"type\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" choose between \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"text\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"number\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"email\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"password\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"url\"), \", \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"tel\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"search\"), \".\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"autocomplete\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" defaults to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"off\"), \". Set to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"on\"), \" or any of \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"td\",\n        props: {\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete\"\n        }\n      }, \"allowed \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"a\"\n      }, \"attributes\")), \".\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"submit_button_title\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" title attribute for the search icon. Only relevant if search input\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"description\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" text describing the content of the input more than the label.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"size\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" at the moment \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"large\"), \" is the only available variant. Leave blank if you want a standard size input.\")), React.createElement(MDXTag, {\n        name: \"tr\",\n        components: components,\n        parentName: \"tbody\"\n      }, React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"attributes\")), React.createElement(MDXTag, {\n        name: \"td\",\n        components: components,\n        parentName: \"tr\",\n        props: {\n          \"align\": null\n        }\n      }, React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"td\"\n      }, \"(optional)\"), \" insert any other attributes. For example \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"td\"\n      }, \"disabled\"), \" or any other custom attributes.\")))));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"23530f13-3139-5e92-a859-686dc18cb6ff"}}