{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Best Practices for testing"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"Testing Frontend Code\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"It is a good idea to include some tips and tricks for frontend testing\\nSince accessibility and user experience are major factors in any design system, it may be sensible to include some tips and tricks for frontend testing.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Write tests, but not too many\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"That said, write tests to gain confidence that your code is strong for both refactoring, enhancements and new features.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Frontend code is changing and moving fast. So 100% code coverage should never be a goal by itself, rather try to make tests which reflect what the end-user would do. By doing so, you will probably cover several internal functions and states by simulating a \\\"click\\\" anyways.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Static testing\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Use static testers like \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"li\"\n      }, \"ESLint\"), \" (also in your editor of choice) to detect typos etc.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Use code formatters like \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"li\"\n      }, \"Prettier\"), \" to uniform code style. This makes working together so much more fun and makes your everyday more productive.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Like ESLint, there is also a linter for styling, called \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"li\"\n      }, \"StyleLint\"), \". It works even on styled components.\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Integration tests\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Do not write unit tests in frontend code. But make integration tests.\\nThink as a user. Think how the user will interact with your application. Do not shallow test, but test components like a user would get it (use mount or render to also test their children, cause a user would do have these as well).\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"There are several packages you can integrate in your test, so your can test your code for accessibility e.g. \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"axe\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"pa11y\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"End-to-end testing\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Having tests which actually run in a browser, makes a lot of sense in frontend code. This method of testing is good to gain confidence and ensure a flow of interactions is working correctly - like a user registration process.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Of course, end-to-end tests can be run on a CI server as well. Make sure you run your tests against a production-like version of your application.\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b6c00469-4f25-50b3-ac81-74b20024f62c"}}