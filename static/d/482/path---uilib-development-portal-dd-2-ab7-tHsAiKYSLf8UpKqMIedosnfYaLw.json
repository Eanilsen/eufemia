{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Portal and docs","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Portal Changes`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Update Content only`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In case You make changes `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `not`), ` related to `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/eufemia/uilib\"\n      }\n    }, `/uilib`), ` pages, You don't have to run the build process for sure. Simply commit Your changes. But make sure the Markdown is formatted correctly by using Prettier.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You can either do changes directly on GitHub with a fork of the Repository, or You can clone the Repository locally on Your computer and make changes there.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Run the Portal locally`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-bash\"\n      }\n    }, `\\$ yarn start\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This will start the Portal. You can view the website by visiting `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://localhost:8000/\"\n      }\n    }, `localhost:8000`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Content changes to both Markdown files and styles (SCSS) and code changes will be reflected immediately.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Build Pages`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In case You make changes witch effects the content of the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/eufemia/uilib\"\n      }\n    }, `/uilib`), ` pages, You have to `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `regenerate`), ` the Portal pages by running:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-bash\"\n      }\n    }, `# In the \\`dnb-design-system-portal\\` directory, run:\n\\$ yarn build\n\n# You can also start a \"watch\" mode with:\n\\$ yarn build:dev\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This will update/create all the needed `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/eufemia/uilib\"\n      }\n    }, `pages`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Fore sure, this applies to change to Markdown files in the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` - but also changes to the Component Code Examples.`));\n  }\n\n}"}}},"pageContext":{"id":"fa9f17b8-e8c3-5bca-8860-b51bdf5b1b91"}}