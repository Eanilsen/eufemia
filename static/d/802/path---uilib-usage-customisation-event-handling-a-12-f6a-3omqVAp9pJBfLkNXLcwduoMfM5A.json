{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Event Handling","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Event Handling`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/\"\n    }\n  }, `dnb-ui-lib`), ` offers a couple of different ways to handling events:`), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, `The declarative way to set and handle events (The way we SET the event is declarative)`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, `The imperative way to set and handle events.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Have a look at the following basic examples.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` uses `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `snake case`), ` (`, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `snake_case`), `) to define the event name property (e.g. `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `on_click`), ` or `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `on_change`), `).`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `React`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Some of the most basic event handling in React.`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Stateless Component`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `import { Button } from 'dnb-ui-lib'\nconst myHandler = event => {}\nconst MyComponent = () => (\n  <Button text=\"Declarative\" on_click={myHandler} />\n)\n`)), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Lifecycle Component`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This example requires also support for class properties.`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Declarative`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `import { Button } from 'dnb-ui-lib'\n\ndefault class MyComponent extends React.Component {\n  myHandler = event => {}\n  render() {\n    return <Button text=\"Declarative\" on_click={this.myHandler} />\n  }\n}\n`)), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Imperative`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `export default class MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this._ref = React.createRef()\n  }\n  componentDidMount() {\n    const eventId = this._ref.current.addEvent('on_change', event => {})\n    this._ref.current.removeEvent(eventId)\n  }\n  render() {\n    return <Button text=\"Imperative\" ref={this._ref} />\n  }\n}\n`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Vue`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Use either the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `@click`), ` or `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `v-on:click`), ` event binding property.\nElse You could also use the imperative `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `ref`), ` method.`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Declarative`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `// Template\n<dnb-button @click=\"handleClick\">Declarative</dnb-button>\n\n// JS\nimport dnb from 'dnb-ui-lib/components/vue'\nconst components = dnb.getComponents(Vue)\n...\nmethods: {\n  handleClick: e => {}\n},\ncomponents\n...\n`)), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Imperative`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `// Template\n<dnb-button ref=\"my_button\">Imperative</dnb-button>\n\n// JS\nimport dnb from 'dnb-ui-lib/components/vue'\nconst components = dnb.getComponents(Vue)\n...\nmethods: {\n  handleClick: e => {}\n},\nmounted() {\n  this.\\$refs.my_button.addEvent('on_click', this.handleClick)\n},\ncomponents\n...\n`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `HTML & ES5`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You may also take a look at the example projects in the repo, called `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `example-html`), `;`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-html\",\n      \"metastring\": \"\"\n    }\n  }, `<!-- Declarative -->\n<dnb-button text=\"Declarative\" on_click=\"myScope.on_click\" />\n<script>\n  function MyClass() {}\n  MyClass.prototype.on_click = function(event) {}\n  window.myScope = new MyClass()\n</script>\n\n<!-- Imperative -->\n<dnb-button text=\"Imperative\" />\n<script>\n  var elem = document.querySelector('dnb-button[text=Imperative]')\n  var eventId = elem.addEvent('on_click', function(event) {})\n  elem.removeEvent(eventId)\n</script>\n`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Dispatch Imperative Event`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Beside the event handler methods, `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `addEvent`), ` and `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `removeEvent`), `, there is also a method to dispatch an event:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `element.fireEvent('on_click', { value: 'Custom Value' })\n`)));\n});"}}},"pageContext":{"id":"c3b2657e-9f19-5bba-be00-f3b2f3c7f7be","absPath":"/home/circleci/repo/packages/dnb-design-system-portal/src/pages/uilib/usage/customisation/event-handling.md","tableOfContents":{"items":[{"url":"#event-handling","title":"Event Handling","items":[{"url":"#react","title":"React","items":[{"url":"#stateless-component","title":"Stateless Component"},{"url":"#lifecycle-component","title":"Lifecycle Component","items":[{"url":"#declarative","title":"Declarative"},{"url":"#imperative","title":"Imperative"}]}]},{"url":"#vue","title":"Vue","items":[{"items":[{"url":"#declarative-1","title":"Declarative"},{"url":"#imperative-1","title":"Imperative"}]}]},{"url":"#html--es5","title":"HTML & ES5"},{"url":"#dispatch-imperative-event","title":"Dispatch Imperative Event"}]}]}}}