{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Component Properties"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Component Properties`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Every `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `Component`), ` has its own `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `properties`), ` to make them work for a variety of cases. You may have a look at the Table describing all the possibilities. Check out f.eks. the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components/button#info\"\n      }\n    }, `Button Properties`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `But here You have some examples. You can even modify them right away in the Browser.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Large Buttons & Icons`), React.createElement(ComponentBox, null, `\n<Button\n  variant=\"secondary\"\n  text=\"Secondary Button\"\n  icon=\"chevron_right_medium\"\n  size=\"large\"\n/>\n<Button\n  icon=\"chevron_right\"\n  icon_size=\"medium\"\n  size=\"large\"\n/>\n`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Extended example`), React.createElement(ComponentBox, {\n      scope: {\n        hamburgerIcon\n      },\n      noInline: true\n    }, `\nconst Wrapper = styled.div\\`\n  .dnb-button {\n    --button-width: 4rem;\n    --button-height: 4rem;\n    --button-border-radius: 2rem;\n    svg {\n      color: fuchsia;\n    }\n  }\n\\`\nconst myHandler = () => alert('Hello')\nrender(\n  <Wrapper>\n    <Button\n      variant=\"secondary\"\n      icon={hamburgerIcon}\n      size=\"default\"\n      on_click={myHandler}\n    />\n    <Button\n      variant=\"secondary\"\n      size=\"default\"\n      on_click={myHandler}\n    >\n      <Icon icon={hamburgerIcon} />\n    </Button>\n  </Wrapper>\n)\n`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Web Components and properties`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `What if a property has to change at runtime?`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Changing a property (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `props`), `) at runtime is a common thing in React. But also `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` Web Components support `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `prop`), ` changes.\nKeep in mind that not all components are tested to the last detail.\nSo, if you come over some special use cases, please contribute back and make a pull request.`), React.createElement(ComponentBox, {\n      noInline: true\n    }, `\nconst Component = () => {\n  const time = new Date().toLocaleTimeString()\n  render(\n    <>\n      <dnb-form-label for_id=\"form-input\">\n        Web Component property updates\n      </dnb-form-label>\n      <dnb-input id=\"form-input\" value={time} disabled />\n    </>\n  )\n}\nComponent()\nclearInterval(window.intervalId)\nwindow.intervalId = setInterval(Component, 1e3)\n`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"89e4cde7-fd12-5940-9d71-07849aff1595"}}