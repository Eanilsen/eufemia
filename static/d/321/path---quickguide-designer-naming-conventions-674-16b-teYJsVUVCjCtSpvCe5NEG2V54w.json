{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Naming Conventions"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"Naming conventions (Designers)\"), React.createElement(MDXTag, {\n        name: \"blockquote\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        parentName: \"blockquote\"\n      }, \"Persist the same component name throughout design, code and conversation \", React.createElement(\"cite\", null, \"Nathan Curtis\"))), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Naming space\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Eufemia makes use of a very simple 8px unit grid. Margins, paddings, and distances consist of multiples of 8 (mostly - sometimes half and quarter units are required). If we were to combine multiples of this 8px 'space block', we could end up with something like this:\"), React.createElement(Img, {\n        src: NamingSpace,\n        caption: \"Naming space units\",\n        alt: \"Naming space units\",\n        height: \"192\"\n      }), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"These titles can then be transferred to component for example tables. A 'medium' table would refer to the amount of padding in the cells.\"), React.createElement(Img, {\n        src: TablesSpace,\n        caption: \"Applying space to tables\",\n        alt: \"Applying space to tables\",\n        height: \"384\"\n      }), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The same can apply to components such as cards, form rows etc. responsive breakpoints can switch between these spacing units in order to expand or contract the overall size of an object.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Naming Colors\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Eufemia for web uses a simple naming system:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"Color name + percentage\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Depending on where the color will be used, it's name formation will be different. For example, in Figma (and other design tools), the name is constructed thus:\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The color name is written with spaces between words. The first word starts with a capital. Some color names have a percentage sign denoting the tint value.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Example:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"Cherry red 8%\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Whereas in CSS as a custom property this is written:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"--color-cherry-red\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Colors have a naming convention across all platforms and formats. Please refer to the table in 'colors' section \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://eufemia.dnb.no/quickguide-designer/colors\"\n        }\n      }, \"https://eufemia.dnb.no/quickguide-designer/colors\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"NB! Android and iOS will have a different format for the same names. This guide is for application in \", React.createElement(\"b\", null, \"web\"), \" products.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Naming conventions in design applications\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"We don't have a naming convention for design files in Figma. However, it is encouraged to name your design file frames and interface designs with clear logical names in english.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"However, in order to maintain consistency, in Figma we name Pages and Frames (canvases) with the first letter capitalised.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Example of a Figma Page name:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"Web components\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Example of a Figma Frame name:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"Spacing components\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Actual components are written with all small letters.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Example of a Figma component name:\"), React.createElement(\"div\", {\n        className: \"typography-box\"\n      }, \"date picker\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"If in doubt, look at the master Eufemia file.\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"06b58b4a-c75b-5706-b386-51b04b048539"}}