{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"CSS Styles"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `CSS Styles`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To ensure flexibility and the possibility of `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/customisation/theming\"\n      }\n    }, `theming`), `, the DNB CSS Styles area build in a bottom up manner.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles are decoupled from the functional `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `components`), `.\nThere are several Packages You can use and combine.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Main Packages`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-core`), ` - Includes the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `DNB Main Styles`), ` like `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/helper-classes\"\n      }\n    }, `helper classes`), `, font loader, colors and a over-all reset (normalize).`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-theme-ui`), ` - Includes `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/elements\"\n      }\n    }, `optional class selectors for elements`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#spacing\"\n      }\n    }, `optional default spacing`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/typography\"\n      }\n    }, `default typography`), ` as well as a theme for every `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `component`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-components`), ` - Includes all the basic layout styles for the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `components`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-patterns`), ` - Includes all the styles (and themes) for `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"/uilib/patterns\"\n      }\n    }, `patterns`), ` (not shown in the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#css-structure-diagram\"\n      }\n    }, `Diagram`), `).`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Sub Packages`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-body`), ` - Includes the default body style and a CSS reset (normalize).`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-basis`), ` - Includes everything from `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-core`), `, except `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-body`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `dnb-ui-elements`), ` - This package will force styles for all the HTML Elements/Tags. Use it carefully - cause this will effect existing styles as well.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All the CSS packages are ready to use, `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `minified CSS files`), `. You will find the main style here: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/style/dnb-ui-core.min.css`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Additionally, it is also possible to import a style and theme for every single component separately. You find the styles here, like: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/components/[button]/style/dnb-button.min.css`), ` - read more about `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/customisation/consume-styles#single-component-only\"\n      }\n    }, `how to import a single-component style`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following Diagram gives an overall overview how the packages are structured.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `CSS Structure Diagram`), React.createElement(\"div\", {\n      className: \"margin-bottom\"\n    }, React.createElement(CSSDiagram, null)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `How to deal with existing styles`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-core`), ` package includes some styles witch effects the global scope (body and CSS reset). To avoid interference with existing styles, let's say a header or a menu, You could only use the `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-basis`), ` package in combination with other packages like `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-theme-ui`), ` and `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-components`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You may have a look at some `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/usage/customisation/styling/legacy-styling\"\n      }\n    }, `code examples of dealing with legacy code`), `.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Example import`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import 'dnb-ui-lib/style/basis'\nimport 'dnb-ui-lib/style/components'\nimport 'dnb-ui-lib/style/themes/ui'\n\n// instead of all together\n/* import 'dnb-ui-lib/style' */\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Use Eufemia Styles elsewhere {#core-style}`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If You neither include the `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-core`), ` nor the `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-body`), ` package, then You ending up having no Eufemia styles for the Document `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<body>`), `. To have the Eufemia Core styles inside a wrapper anyway, simply use the following helper class: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-core-style`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<div class=\"dnb-core-style\">\n  <!-- Wrapper to have correct Eufemia styles inside -->\n  <h1 class=\"dnb-h1\">I have now the Eufemia Style</h1>\n  <p class=\"dnb-p\">👉 Me as well</p>\n</div>\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `CSS Specificity`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Once You use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-core-style`), ` wrapper class, You may in some circumstances, need to use it to modify already given properties.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Styled Components`), ` You do it this way:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-jsx\"\n      }\n    }, `import { P } from 'dnb-ui-lib/elements'\nconst MyElement = styled(P)\\`\n  .dnb-core-style & {\n    margin-top: 3rem;\n  }\n  color: var(--color-sky-blue);\n\\`\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In CSS You simply do it this way:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `.dnb-core-style .my-element {\n  margin-top: 3rem;\n  color: var(--color-sky-blue);\n}\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Spacing for Articles {#spacing}`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To ensure more flexibility in styling, all the margins / spacings are reset to zero. But more often we have to have a by default defined spacing, e.g. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `margin`), ` on HTML Elements like headings or paragraphs.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To use the default DNB spacings, define a CSS class called: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-spacing`), `\nEffected HTML Elements inside this container will then have a default spacing. This will be specially helpful for article alike pages.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<article class=\"dnb-spacing\">\n  <!-- DNB spacings -->\n  <h1 class=\"dnb-h1\">e.g. I have now the Eufemia spacing (margin)</h1>\n  <p class=\"dnb-p\">👉 Me as well</p>\n</article>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles for the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-spacing`), ` are included in the package: `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-theme-ui`), `\nFor more details, check out the source file: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `spacing.scss`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Styling of HTML Elements (tags)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To deal with HTML Elements, without declaring them individual with the right css classes, like `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<h1 class=\"dnb-h1\">`), `, You can import the sub package `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-elements`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `NB:`), ` Use it carefully - cause this will effect existing styles as well!`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `/* directly the CSS file */\nimport 'dnb-ui-lib/style/dnb-ui-elements.min.css'\n\n/* ... or by the shorthand */\nimport 'dnb-ui-lib/style/elements'\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<!-- HTML Elements in the wild -->\n<h1>I'm now Eufemia styled</h1>\n<ul>\n  <li>Me as well</li>\n</ul>\n`)));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"bdcdbecf-e4f8-54a3-a3a4-831730b26dce"}}