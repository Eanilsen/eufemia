{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Typography"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"Typography\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Font Face\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The DNB default Font Family is \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Fedra Sans Std\"), \". This font, together with it's weights is loaded and imported with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"@font-face\"), \" in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"/css/core/fonts.scss\"), \". The font is included in the library package.\\nTo make sure you don't load all of the font faces at once, you apply font \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"weights\"), \" to load the predefined font faces.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Read more how to use the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/typography/font-weights/\"\n        }\n      }, \"different weights\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Headings\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The DNB UX team has currently only defined tree levels of heading styles (h1, h2 and h3). But level 4, 5 and 6 are also supported by the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"If you wish to have a header look like a heading, you can use these classes:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \".dnb-h1\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \".dnb-h2\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \".dnb-lead\"))), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Read more about \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/best-practices/for-typography\"\n        }\n      }, \"best practices for typography\"), \".\"), React.createElement(MDXTag, {\n        name: \"h4\",\n        components: components\n      }, \"Heading examples\"), React.createElement(CodeBlock, {\n        reactLive: true,\n        hideCode: true,\n        caption: \"Default Heading typography\"\n      }, \"\\n<h1 className=\\\"dnb-h1\\\">H1</h1>\\n<h2 className=\\\"dnb-h2\\\">H2</h2>\\n<h3 className=\\\"dnb-h3\\\">H3</h3>\\n<h4 className=\\\"dnb-h4\\\">H4</h4>\\n<h5 className=\\\"dnb-h5\\\">H5</h5>\\n<h6 className=\\\"dnb-h6\\\">H6</h6>\\n\"), React.createElement(CodeBlock, {\n        reactLive: true,\n        hideCode: true,\n        \"data-dnb-test\": \"heading-additional\",\n        caption: \"Additional Heading typography\"\n      }, \"\\n<article>\\n  <h1 className=\\\"dnb-h1\\\">\\n    <small>Small H1</small> Normal H1\\n  </h1>\\n  <h1 className=\\\"dnb-h1 dnb-small\\\">Small H1 with class</h1>\\n  <h2 className=\\\"dnb-h2\\\">\\n    Normal H2 <small>Small H2</small>\\n  </h2>\\n  <h3 className=\\\"dnb-h3\\\">\\n    Normal H3/Lead <small>Small H3/Lead</small>\\n  </h3>\\n</article>\\n\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Paragraph\"), React.createElement(CodeBlock, {\n        reactLive: true,\n        hideCode: true,\n        \"data-dnb-test\": \"paragraph-default\",\n        caption: \"Default Paragraph styles\"\n      }, \"\\n<p className=\\\"dnb-p\\\">\\n  Here is a paragraph text<br />\\n  <a href=\\\"/\\\" className=\\\"dnb-anchor\\\">Anchor / Text Link</a><br />\\n  <b>Bold paragraph</b><br />\\n  <strong>Strong paragraph</strong><br />\\n  <i>Italic paragraph</i><br />\\n  <u>Underline paragraph</u><br />\\n  Numbers 0123456789<br />\\n  <code className=\\\"dnb-code\\\">Code paragraph</code><br />\\n  <cite>Cite paragraph</cite><br />\\n</p>\\n\"), React.createElement(CodeBlock, {\n        reactLive: true,\n        hideCode: true,\n        \"data-dnb-test\": \"paragraph-small\",\n        caption: \"Paragraph with small font-size\"\n      }, \"\\n<p className=\\\"dnb-p\\\">\\n  <small>\\n    Here is a small paragraph text<br />\\n    <a href=\\\"/\\\" className=\\\"dnb-anchor\\\">Anchor / Text Link</a><br />\\n    <b>Bold paragraph</b><br />\\n    <strong>Strong paragraph</strong><br />\\n    <i>Italic paragraph</i><br />\\n    <u>Underline paragraph</u><br />\\n    Numbers 0123456789<br />\\n    <code className=\\\"dnb-code\\\">Code paragraph</code><br />\\n    <cite>Cite paragraph</cite><br />\\n  </small>\\n</p>\\n\"), React.createElement(CodeBlock, {\n        reactLive: true,\n        hideCode: true,\n        \"data-dnb-test\": \"paragraph-additional\",\n        caption: \"Additional Paragraph formatting (not defined yet)\"\n      }, \"\\n<p className=\\\"dnb-p\\\">\\n  <del>Deleted paragraph</del><br />\\n  <mark>Marked paragraph</mark><br />\\n  <ins>Inserted paragraph</ins><br />\\n  <sub>Subscript paragraph</sub><br />\\n  <sup>Superscript paragraph</sup><br />\\n</p>\\n\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Read more \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/quickguide-designer/fonts/\"\n        }\n      }, \"about Fonts in the Designer Guides\"), \".\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"25bc8903-e8b0-58e9-9f2d-49d3aed45998"}}