{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Development","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `Development`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` uses a `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://nodejs.org\"\n    }\n  }, `Node`), ` based setup with a lot of auto generated code to make the `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://reactjs.org\"\n    }\n  }, `React`), ` based components and patterns.`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Why Yarn and not Lerna?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The mono repo `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-design-system`), ` uses `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://yarnpkg.com/\"\n    }\n  }, `Yarn`), ` to maintain the `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://yarnpkg.com/en/docs/workspaces\"\n    }\n  }, `workspace functionality`), `. Instead of using `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `npm link`), ` or `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `yarn link`), `, we use packages. This simplifies the linking and shared modules between `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://docs.npmjs.com/getting-started/packages\"\n    }\n  }, `packages`), `.`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Install the repo locally on Your machine`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# Somewhere, call:\ngit clone https://github.com/eggsdesign/dnb-design-system.git\n\n# change to the directory:\ncd dnb-design-system\n\n# and install the node modules by simply calling:\nyarn\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Once the installation is done, `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `yarn startup`), ` will be called to make all ready for a local server start.`), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Portal`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Start the Portal locally`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# In the \\`dnb-design-system-portal\\` directory, call:\nyarn start\n`)), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Make a production build of the Portal, ready for deploy`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# In the \\`dnb-design-system-portal\\` directory, call:\nyarn build\n`)), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `UI Library`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Make a npm package build of the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"h4\"\n  }, `dnb-ui-lib`), ` ready to publish`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# In the \\`dnb-ui-lib\\` directory, call:\nyarn build\n`)), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `Get started on making new Components and Patterns`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In the repo `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` find the directory `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `/src/components`), ` or `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `/src/patterns`), `. There we can place a new directory with all the sub needed folders. To get a reference, take a look how the other `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `components`), ` and `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `patterns`), ` are set up.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Next, we have to pre-build the library so it gets ready for a publish.\nTo do so and to integrate the new parts into the lib, simply do one of these steps:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# Method 1: in the \\`dnb-ui-lib\\` directory, call:\nyarn startup\n\n# Method 2: in the \\`dnb-design-system-portal\\` directory, call:\nyarn startup\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `Method 2`), ` will also create the needed pages in the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-design-system-portal`), ` at the same time.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `How to move or rename a Component or a Pattern?`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Simply run `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `yarn startup`), ` for every build you have to generate.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `What happens on calling `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"strong\"\n  }, `yarn startup`), `?`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `There are a lot of different things going on, like:`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Assets are getting generated`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `All the lib code gets compiled down to ECMAScript 5.1`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `UMD bundle gets created`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `All SASS styles are validated and compiled`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Code gets minified`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A couple of folders and files are generated in the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` root. They are ignored in the .gitignore file, so they not get a part of the git repo.\nBut these folders/files like:`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/assets`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/components`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/patterns`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/styles`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/web-components`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/umd`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `/shared`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `index.js`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Will be a part of the npm `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.npmjs.com/package/dnb-ui-lib\"\n    }\n  }, `package`), `.`), React.createElement(MDXTag, {\n    name: \"hr\",\n    components: components\n  }), React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `NPM`), React.createElement(MDXTag, {\n    name: \"h4\",\n    components: components\n  }, `How to publish a new version of the `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h4\",\n    props: {\n      \"href\": \"https://www.npmjs.com/package/dnb-ui-lib\"\n    }\n  }, `package`), `?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Make sure You are logged in to `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `npm`), ` locally. You also have to make sure the terminal is directed to `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Make sure You follow `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"strong\",\n    props: {\n      \"href\": \"https://semver.org\"\n    }\n  }, `Semantic Versioning`))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `For a patch version e.g., run `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `npm version patch`), `\nOnce the new version is set, go ahead:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-bash\",\n      \"metaString\": \"\"\n    }\n  }, `# To pack and publish the new version, run:\nnpm publish ./\n\n# If you don't want something to be installed by default\nnpm publish ./ --tag beta\n`)));\n});"}}},"pageContext":{"id":"9aa01a58-c8f7-5fde-b40f-6a53b3af497f"}}