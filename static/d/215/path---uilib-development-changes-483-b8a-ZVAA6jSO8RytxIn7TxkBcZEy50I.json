{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Make Changes"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"Making changes\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Get started on making new Components and Patterns\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"In the repo \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \" you will find the directory \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"/src/components\"), \" or \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"/src/patterns\"), \". There you can place a new directory with all the necessary sub folders. As a reference, take a look how the other \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"components\"), \" and \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"patterns\"), \" are set up.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Next, we need to \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"pre-publish\"), \" the library locally, so we can check the building process and test our changes locally by using \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"yarn build\"), \" again.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"To use the local build, you can either run the portal, or use \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"yarn link\"), \" to link the package with a totally different project.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"As well as that, you can also use Storybook. Inside \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \", run \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"yarn story\"), \" to start the server.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"It is recommended that you make a new branch to isolate your work before it gets merged into the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"origin/develop\"), \" branch.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        }\n      }, \"# Make a Feature branch\\n$ git checkout -b ftr/my-feature\\n\\n# - or a Work In Progress branch\\n$ git checkout -b wip/working-on-it\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"What happens on calling \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"h3\"\n      }, \"yarn build\"), \"?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"There are a lot of different things going on, like:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Assets are getting generated\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"All the lib code gets compiled down to ECMAScript 5.1\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"UMD bundle gets created\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"All SASS styles are validated and compiled\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Code gets minified\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Icons are getting converted\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"A couple of folders and files are generated in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \" root. They are ignored in the .gitignore file, so they not get a part of the git repo.\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"444e231f-aaa7-5224-bca9-72b7bdd51a96"}}