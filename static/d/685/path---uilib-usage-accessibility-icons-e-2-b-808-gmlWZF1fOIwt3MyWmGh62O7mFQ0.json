{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"Icon"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Accessibility of Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `By using Inline SVG, we have today the possibility to make graphical assets both `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `responsive`), ` and `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `interactive`), `. In order to do so, use the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components/icon\"\n      }\n    }, `Icon`), ` or `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components/icon-primary\"\n      }\n    }, `IconPrimary`), ` component. These components provides the needed runtime processing, witch is needed to get there.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Decorative Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If your icons are purely `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `decorative`), `, youâ€™ll need to manually add an `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `aria-hidden`), ` (results in `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `aria-hidden=\"true\"`), `) attribute to each of your icons so Your app is \"accessible\".`), React.createElement(ComponentBox, {\n      scope: {\n        Beach\n      }\n    }, `\n<Icon icon={Beach} size=\"60\" title=\"Beach\" aria-hidden />\n`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Responsive Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `size=\"auto\"`), ` to force the icon to inherit the size of its parent element.`), React.createElement(ComponentBox, {\n      scope: {\n        Beach\n      }\n    }, `\n<h1>My H1 with an Icon <Icon icon={Beach} title=\"Beach\" size=\"auto\" /></h1>\n<h4>My H4 with the same Icon <Icon icon={Beach} title=\"Beach\" size=\"auto\" /></h4>\n`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `SVG Icons`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Scalable Vector Graphics`), ` can be set up to be scaleable and actually respond to the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-size`), `.`), React.createElement(ComponentBox, {\n      scope: {\n        Beach\n      },\n      noInline: true\n    }, `\nconst Responsive = styled.span\\`\n  svg {\n    font-size: inherit;\n    width: 1.5em;\n    height: 1.5em;\n  }\n\\`\n\\nconst Svg = (props) => (<svg\n  width=\"16\"\n  height=\"16\"\n  viewBox=\"0 0 16 16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  {...props}\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M4.03 5.22a.75.75 0 0 0-1.06 1.06l4.5 4.5a.75.75 0 0 0 1.06 0l4.5-4.5a.75.75 0 0 0-1.06-1.06L8 9.19 4.03 5.22z\"\n    fill=\"#000\"\n  />\n</svg>)\n\\nrender(<>\n  <p>\n    <Svg width=\"24\" height=\"24\" /> - has a fix size\n  </p>\n  <p>\n    <Responsive><Svg /></Responsive> - is responsive\n  </p>\n  <p>\n    <span className=\"dnb-icon dnb-icon--medium\">\n      <Svg />\n    </span> - use of <code>.dnb-icon</code>\n  </p>\n</>)\n`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"51179809-e57e-501c-ba67-43fe0ef52ca5"}}