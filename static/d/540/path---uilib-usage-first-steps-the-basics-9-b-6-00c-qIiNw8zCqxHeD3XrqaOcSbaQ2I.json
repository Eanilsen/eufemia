{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"The Basics","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, `The Basics`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` is hosed on the global NPM registry. Nevertheless, it includes all the needed parts to have a independent layer on top of a Frontend Framework of Your choice.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The recomandation is to have a application setup with a compiling/build process in place.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `HTML Elements and styling`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In short, we have three things going on once a HTML Element is showing up and running.`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Syntax as HTML`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Styling by CSS`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Internal states by JavaScript`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `From there on we can define the properties to customize the HTML Elements as needed. But we may also bind some Event Listeners to work together with Your Application.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `States`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `All the HTML Elements have individual interaction states. The look and feel is defined in the default `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/usage/theming\"\n    }\n  }, `theming file`), ` (`, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `theme-ui`), `).`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Hover`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Active (TouchStart)`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Focus`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Disabled`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Global Scope`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Once You import the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), ` style, You will not only get the HTML Element styles, but also for lower lever tags like `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/typography\"\n    }\n  }, `Headings and Paragraphs`), ` and support for `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/usage/accessibility/focus\"\n    }\n  }, `Focus Management`), `.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Compiler`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `With `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://nodejs.org/\"\n    }\n  }, `Node.js`), ` as our JavaScript runtime in place, we may use ES6 (ECMAScript 2015) to write our Application. There are many Framework and Libraries to build user interfaces. If we take `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx\"\n    }\n  }, `React JSX`), ` as an starting point, we basically `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/usage/first-steps/react\"\n    }\n  }, `do this`), `:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `<Button text=\"Primary Button\" />\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `and get this: `, React.createElement(Button, {\n    text: \"Primary Button\"\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You also may `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/usage/styling\"\n    }\n  }, `import the styles`), ` on a higher lever in Your application:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metastring\": \"\"\n    }\n  }, `import 'dnb-ui-lib/style'\n`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `And finally bind an `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"/eufemia/uilib/usage/event-handling\"\n    }\n  }, `event listener`), `:`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metastring\": \"\"\n    }\n  }, `<Button text=\"Button\" on_click={myClickHandler} />\n`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `UMD`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In case You don't have a compiling/build process, You can use the UMD packed version of the `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `dnb-ui-lib`), `. Take a look here how to use it `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `REPOSITORY/packages/examples/example-html`), ` (src/umd). But this will not optimize Your code for the best user experience. So, to use UMD is `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `not recommended`), `.`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-html\",\n      \"metastring\": \"\"\n    }\n  }, `<html>\n  <head>\n    ...\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/dnb-ui-lib@latest/style/dnb-ui-lib.min.css\"\n    />\n  </head>\n  <body>\n    ...\n    <script src=\"https://unpkg.com/dnb-ui-lib@latest/umd/dnb-ui-lib.min.js\"></script>\n  </body>\n</html>\n`)));\n});"}}},"pageContext":{"id":"eb9ed877-97a5-542d-9634-9e7c18a5c2b1","absPath":"/home/travis/build/dnbexperience/eufemia/packages/dnb-design-system-portal/src/pages/uilib/usage/first-steps/the-basics.md","tableOfContents":{"items":[{"url":"#the-basics","title":"The Basics","items":[{"url":"#html-elements-and-styling","title":"HTML Elements and styling"},{"url":"#states","title":"States"},{"url":"#global-scope","title":"Global Scope"},{"url":"#compiler","title":"Compiler"},{"url":"#umd","title":"UMD"}]}]}}}