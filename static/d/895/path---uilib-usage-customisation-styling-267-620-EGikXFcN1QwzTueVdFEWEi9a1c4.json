{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Styling"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Styling`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The CSS is a compiled and minified version. You will find it here: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/style/dnb-ui-lib.min.css`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following Diagram gives an overall overview how the styles are structured.`), React.createElement(CSSDiagram, null), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Apply the DNB Style`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To use the default DNB style, you have to define a CSS class called: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-style`), `\nYou can set this class on the document body or on any content container.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<div class=\"dnb-style\">\n  <!-- DNB spacings and sizing -->\n  <h1>e.g. I have now a margin and a size</h1>\n  <p>‚òùüèª Me as well</p>\n</div>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles for the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-style`), ` are included in the default UI Theme.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib/style/themes/dnb-ui-theme.min.css`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `What does `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"h3\"\n    }, `.dnb-style`), ` apply?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Once You have to style HTML Elements like:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Headings`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Paragraphs`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Basic Tables`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Lists (ordered and unordered)`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `The Reason`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The benefits of explicitly defining the style class `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.dnb-style`), `, is that we then can use our `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/components\"\n      }\n    }, `components`), ` on their own, without effecting all the existing styled HTML Elements and tags. This gives use a kind of backwards compatibility.\nBut it makes it also more flexible, like if we only want to apply our DNB HTML Elements Styles to a certain area of our web application.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `For Node based environments`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To include the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `dnb-ui-lib`), ` styles (except patterns), do this:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `// This also includes the default DNB UI Theme\nimport 'dnb-ui-lib/style'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If You want to import the styles of all components - `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `without`), ` the default DNB UI Theme:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `// No Theme is included\nimport 'dnb-ui-lib/style/components'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You may want to import a theme as well:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `// Default DNB UI Theme\nimport 'dnb-ui-lib/style/theme'\n\n// ... is equivalent to the default theme\nimport 'dnb-ui-lib/style/themes/ui'\n\n// ... or some other theme\nimport 'dnb-ui-lib/style/themes/[NAME].css'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You also can import a single style of a single component:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import 'dnb-ui-lib/components/button/style'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You may have a look at the guides about `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/uilib/typography\"\n      }\n    }, `Typography`), `.`));\n  }\n\n}"}}},"pageContext":{"id":"bdcdbecf-e4f8-54a3-a3a4-831730b26dce"}}