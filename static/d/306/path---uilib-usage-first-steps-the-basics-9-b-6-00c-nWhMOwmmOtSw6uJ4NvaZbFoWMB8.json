{"data":{"site":{"siteMetadata":{"description":"Eufemia Design System is the go to place for all who has to design, develop and make digitan WEB applications for DNB."}},"mdx":{"fields":{"title":"The Basics"},"code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components\n      }, \"The Basics\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \" is hosted on the global NPM registry. It includes all the necessary parts to build an independent layer on top of a frontend framework of your choice.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"It is recommended to have an application setup with a compiling/build process in place.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"HTML Elements and styling\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"There are three things going on once an HTML element is displayed and up-and-running.\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"syntax as HTML\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"styling by CSS\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"internal states by JavaScript\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"From here we can redefine the properties of the HTML elements in order to customise them.\\nWe can also bind event listeners to work together with your application.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"States\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"All the HTML elements have individual interaction states. The look and feel is defined in the default \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/theming\"\n        }\n      }, \"theming file\"), \" (\", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"theme-ui\"), \").\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"hover\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"active (TouchStart)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"focus\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"disabled\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"CSS Styles\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Have a read on \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/styling\"\n        }\n      }, \"how the styles are setup\"), \" and \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/consume-styles\"\n        }\n      }, \"how to import the CSS\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"Compiler\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"With \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://nodejs.org/\"\n        }\n      }, \"Node.js\"), \" as our JavaScript runtime in place, we may use ES6 (ECMAScript 2015) to write our application. There are many frameworks and libraries to build user interfaces. If we take \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx\"\n        }\n      }, \"React JSX\"), \" as an starting point, we basically \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/first-steps/react\"\n        }\n      }, \"do this\"), \":\"), React.createElement(ComponentBox, {\n        hideCode: true,\n        hideToolbar: true\n      }, \"\\n<Button text=\\\"Primary Button\\\" />\\n\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-jsx\"\n        }\n      }, \"// Define the imports\\nimport { Button } from 'dnb-ui-lib'\\n\\n// And consume the Component in Your markup render method\\nrender(<Button text=\\\"Primary Button\\\" />)\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"You also may \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/styling\"\n        }\n      }, \"import the styles\"), \" on a higher lever in Your application:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        }\n      }, \"// e.g. in the App root\\nimport 'dnb-ui-lib/style'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"You can also import a single style of one component at a time:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        }\n      }, \"// Imports only the Button CSS and Main DNB Theme\\nimport 'dnb-ui-lib/components/button/style'\\nimport 'dnb-ui-lib/components/button/style/themes/ui'\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"And finally bind an \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"/uilib/usage/customisation/event-handling\"\n        }\n      }, \"event listener\"), \":\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-jsx\"\n        }\n      }, \"<Button text=\\\"Button\\\" on_click={myClickHandler} />\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components\n      }, \"UMD\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"In case you don't have a compiling/build process, You can use the UMD packed version of the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"dnb-ui-lib\"), \". Take a look here how to use it \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"REPOSITORY/packages/examples/example-html\"), \" (src/umd). But this will not optimize your code for the best user experience. So, to use UMD is \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\"\n      }, \"not recommended\"), \".\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-html\"\n        }\n      }, \"<html>\\n  <head>\\n    ...\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://unpkg.com/dnb-ui-lib@latest/style/dnb-ui-core.min.css\\\"\\n    />\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://unpkg.com/dnb-ui-lib@latest/style/dnb-ui-components.min.css\\\"\\n    />\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://unpkg.com/dnb-ui-lib@latest/style/themes/dnb-theme-ui.min.css\\\"\\n    />\\n  </head>\\n  <body>\\n    ...\\n    <script src=\\\"https://unpkg.com/dnb-ui-lib@latest/umd/dnb-ui-lib.min.js\\\"></script>\\n  </body>\\n</html>\\n\")));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"242d143f-bd9c-559e-9483-fb77043ac814"}}