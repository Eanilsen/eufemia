{"data":{"site":{"siteMetadata":{"description":"The DNB Style Guide is the go to place for all who has to design, develop or create visuals with the DNB design."}},"mdx":{"fields":{"title":"Numbers","header":"UI Library"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Numbers`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Numbers comes in two variants; `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Lining`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Old Style`), `. Use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lining`), ` in tables and in other contexts where lots of numbers are side-by-side.\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Old Style`), ` is preferred where the numbers stand alone and need to stand out.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Available Types`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `.dnb-typo-number--lining`), ` `, React.createElement(\"span\", {\n      className: \"dnb-typo-number--lining\"\n    }, `0123456789`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `.dnb-typo-number--old-style`), ` `, React.createElement(\"span\", {\n      className: \"dnb-typo-number--old-style\"\n    }, `0123456789`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `.dnb-typo-number--tabular`), ` `, React.createElement(\"span\", {\n      className: \"dnb-typo-number--tabular\"\n    }, `0123456789`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `.dnb-typo-number--proportional`), ` `, React.createElement(\"span\", {\n      className: \"dnb-typo-number--proportional\"\n    }, `0123456789`))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Helper Classes and usage in HTML`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<p class=\"dnb-typo-number--lining\">0123456789</p>\n<p class=\"dnb-typo-number--old-style\">0123456789</p>\n<p class=\"dnb-typo-number--tabular\">0123456789</p>\n<p class=\"dnb-typo-number--proportional\">0123456789</p>\n`)));\n  }\n\n}"}}},"pageContext":{"id":"609177ec-34f2-5aca-8723-b67ebd0afa37"}}