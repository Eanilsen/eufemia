(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{1418:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",function(){return c}),t.d(n,"default",function(){return p});t(17),t(15),t(22),t(21),t(20),t(23),t(3),t(5);var a=t(0),o=t(13);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c={title:"Event Handling",draft:!1,order:7},m={_frontmatter:c},d="wrapper";function p(e){var n=e.components,t=l(e,["components"]);return Object(a.mdx)(d,r({},m,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("h1",null,"Event Handling"),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"dnb-ui-lib")," offers a couple of different ways to handling events:"),Object(a.mdx)("ol",null,Object(a.mdx)("li",{parentName:"ol"},"the declarative way to set and handle events (the way we SET the event is declarative)"),Object(a.mdx)("li",{parentName:"ol"},"the imperative way to set and handle events")),Object(a.mdx)("p",null,"Have a look at the following basic examples:"),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"dnb-ui-lib")," uses ",Object(a.mdx)("em",{parentName:"p"},"snake case")," (",Object(a.mdx)("strong",{parentName:"p"},"snake_case"),") to define the event name property (e.g. ",Object(a.mdx)("inlineCode",{parentName:"p"},"on_click")," or ",Object(a.mdx)("inlineCode",{parentName:"p"},"on_change"),"). Read more about the ",Object(a.mdx)("a",r({parentName:"p"},{href:"uilib/development/naming"}),"naming conventions"),"."),Object(a.mdx)("h2",null,"React"),Object(a.mdx)("p",null,"Some of the most basic event handling in React."),Object(a.mdx)("h3",null,"Stateless Component"),Object(a.mdx)(o.a,{useRender:!0,mdxType:"ComponentBox"},"\nconst myHandler = () => alert('Hello')\nrender(<Button text=\"Declarative\" on_click={myHandler} />)\n"),Object(a.mdx)("h3",null,"Lifecycle Component"),Object(a.mdx)("p",null,"This example requires also support for class properties."),Object(a.mdx)("h4",null,"Declarative"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { Button } from 'dnb-ui-lib'\n\nexport default class MyComponent extends React.Component {\n  myHandler = event => {}\n  render() {\n    return <Button text=\"Declarative\" on_click={this.myHandler} />\n  }\n}\n")),Object(a.mdx)("h4",null,"Imperative"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-jsx"}),"export default class MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this._ref = React.createRef()\n  }\n  componentDidMount() {\n    const eventId = this._ref.current.addEvent('on_change', event => {})\n    this._ref.current.removeEvent(eventId)\n  }\n  render() {\n    return <Button text=\"Imperative\" ref={this._ref} />\n  }\n}\n")),Object(a.mdx)("h2",null,"Vue"),Object(a.mdx)("p",null,"Use either the ",Object(a.mdx)("inlineCode",{parentName:"p"},"@click")," or ",Object(a.mdx)("inlineCode",{parentName:"p"},"v-on:click")," event binding property.\nOr else you could also use the imperative ",Object(a.mdx)("strong",{parentName:"p"},"ref")," method."),Object(a.mdx)("h4",null,"Declarative"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-jsx"}),"// Template\n<dnb-button @click=\"handleClick\">Declarative</dnb-button>\n\n// JS\nimport dnb from 'dnb-ui-lib/components/vue'\nconst components = dnb.getComponents(Vue)\n...\nmethods: {\n  handleClick: e => {}\n},\ncomponents\n...\n")),Object(a.mdx)("h4",null,"Imperative"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-jsx"}),"// Template\n<dnb-button ref=\"my_button\">Imperative</dnb-button>\n\n// JS\nimport dnb from 'dnb-ui-lib/components/vue'\nconst components = dnb.getComponents(Vue)\n...\nmethods: {\n  handleClick: e => {}\n},\nmounted() {\n  this.$refs.my_button.addEvent('on_click', this.handleClick)\n},\ncomponents\n...\n")),Object(a.mdx)("h2",null,"HTML & ES5"),Object(a.mdx)("p",null,"You may also take a look at the example projects in the repo, called ",Object(a.mdx)("inlineCode",{parentName:"p"},"example-html"),";"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-html"}),'\x3c!-- Declarative --\x3e\n<dnb-button text="Declarative" on_click="myScope.on_click" />\n<script>\n  function MyClass() {}\n  MyClass.prototype.on_click = function(event) {}\n  window.myScope = new MyClass()\n<\/script>\n\n\x3c!-- Imperative --\x3e\n<dnb-button text="Imperative" />\n<script>\n  var elem = document.querySelector(\'dnb-button[text=Imperative]\')\n  var eventId = elem.addEvent(\'on_click\', function(event) {})\n  elem.removeEvent(eventId)\n<\/script>\n')),Object(a.mdx)("h2",null,"Dispatch Imperative Event"),Object(a.mdx)("p",null,"Besides the event handler methods, ",Object(a.mdx)("inlineCode",{parentName:"p"},"addEvent")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"removeEvent"),", there is also a method to dispatch an event:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",r({parentName:"pre"},{className:"language-js"}),"element.fireEvent('on_click', { value: 'Custom Value' })\n")))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-uilib-usage-customisation-event-handling-md-da1bb6a1530472dd91c0.js.map