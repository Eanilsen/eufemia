{"version":3,"sources":["webpack:////home/circleci/repo/node_modules/color-string/index.js","webpack:////home/circleci/repo/node_modules/color-name/index.js","webpack:////home/circleci/repo/node_modules/simple-swizzle/index.js","webpack:////home/circleci/repo/node_modules/simple-swizzle/node_modules/is-arrayish/index.js","webpack:////home/circleci/repo/node_modules/color-convert/index.js","webpack:////home/circleci/repo/node_modules/color-convert/node_modules/color-name/index.js","webpack:////home/circleci/repo/node_modules/color-convert/route.js","webpack:////home/circleci/repo/node_modules/color/index.js","webpack:////home/circleci/repo/node_modules/color-convert/conversions.js"],"names":["colorNames","__webpack_require__","swizzle","reverseNames","name","hasOwnProperty","cs","module","exports","to","get","clamp","num","min","max","Math","hexDouble","str","toString","toUpperCase","length","string","val","model","substring","toLowerCase","hsl","hwb","rgb","value","match","i","hexAlpha","i2","parseInt","slice","round","parseFloat","alpha","isNaN","hex","rgba","arguments","percent","r","g","b","hsla","hwba","a","keyword","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","isArrayish","concat","Array","prototype","args","results","len","arg","call","push","wrap","fn","obj","isArray","splice","Function","Object","getOwnPropertyDescriptor","constructor","conversions","route","convert","keys","forEach","fromModel","defineProperty","channels","labels","routes","toModel","wrappedFn","result","conversion","wrapRounded","raw","wrapRaw","deriveBFS","graph","models","distance","parent","buildGraph","queue","current","pop","adjacents","adjacent","node","unshift","link","from","wrapConversion","path","cur","colorString","_slice","skippedModels","hashedModelKeys","sort","join","limiters","Color","this","Error","color","valpha","newArr","zeroArray","indexOf","hashedKeys","JSON","stringify","limit","freeze","getset","channel","modifier","m","maxfn","v","arr","toJSON","places","self","percentString","array","object","unitArray","unitObject","map","Number","toFixed","roundTo","roundToPlace","hue","saturationl","lightness","saturationv","chroma","wblack","x","y","z","l","rgbNumber","luminosity","lum","chan","pow","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","ratio","darken","saturate","desaturate","whiten","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","p","undefined","w","w1","w2","newAlpha","cssKeywords","reverseKeywords","key","hsv","cmyk","xyz","lab","lch","ansi16","ansi256","hcg","apple","h","delta","rdif","gdif","bdif","s","diff","diffc","c","k","reversed","currentClosestKeyword","currentClosestDistance","Infinity","t1","t2","t3","smin","lmin","hi","floor","f","q","t","sl","vmin","n","wh","bl","y2","x2","z2","atan2","PI","sqrt","hr","cos","sin","ansi","mult","rem","split","char","integer","mg","pure"],"mappings":"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","file":"4-62e446cc36744dd24454.js","sourcesContent":["/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (typeof obj === 'undefined') {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n"],"sourceRoot":""}