{"version":3,"sources":["webpack:///./src/pages/uilib/usage/accessibility/icons.md"],"names":["_frontmatter","title","draft","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_8__","_extends","mdxType","parentName","href","Tags_ComponentBox__WEBPACK_IMPORTED_MODULE_9__","scope","Beach","useRender","isMDXComponent"],"mappings":"k0BAOO,IAAMA,EAAe,CAC1BC,MAAS,OACTC,OAAS,GAQLC,EAAc,CAClBH,gBAEII,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,EAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,IAAAD,CAACN,EAADQ,EAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EH,OAAAC,EAAA,IAAAD,CAAA,oCACAA,OAAAC,EAAA,IAAAD,CAAA,uFAAkFA,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,KAAnB,cAAlF,QAAyIJ,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,KAAnB,eAAzI,gCAAyNJ,OAAAC,EAAA,IAAAD,CAAA,IAAAE,EAAA,CAAGE,WAAW,KAAQ,CAC3OC,KAAQ,2BAD6M,QAAzN,OAEyBL,OAAAC,EAAA,IAAAD,CAAA,IAAAE,EAAA,CAAGE,WAAW,KAAQ,CAC3CC,KAAQ,mCADa,eAFzB,uEAKAL,OAAAC,EAAA,IAAAD,CAAA,8BACAA,OAAAC,EAAA,IAAAD,CAAA,qCAAgCA,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,KAAnB,cAAhC,oCAAmHJ,OAAAC,EAAA,IAAAD,CAAA,UAAQI,WAAW,KAAnB,eAAnH,gBAAmLJ,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,sBAAnL,kEACAJ,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcC,MAAO,CACnBC,iBACCL,QAAQ,gBAFX,wEAOAH,OAAAC,EAAA,IAAAD,CAAA,8BACAA,OAAAC,EAAA,IAAAD,CAAA,gBAAWA,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,eAAX,iEACAJ,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcC,MAAO,CACnBC,iBACCL,QAAQ,gBAFX,sKAQAH,OAAAC,EAAA,IAAAD,CAAA,uBACAA,OAAAC,EAAA,IAAAD,CAAA,SAAGA,OAAAC,EAAA,IAAAD,CAAA,MAAII,WAAW,KAAf,4BAAH,8DAAsHJ,OAAAC,EAAA,IAAAD,CAAA,cAAYI,WAAW,KAAvB,aAAtH,KACAJ,OAAAC,EAAA,IAAAD,CAACM,EAAA,EAAD,CAAcC,MAAO,CACnBC,iBACCC,WAAS,EAACN,QAAQ,gBAFrB,6vBA4CJR,EAAWe,gBAAiB","file":"component---src-pages-uilib-usage-accessibility-icons-md-e46304bcb66269e7933f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport ComponentBox from 'Tags/ComponentBox';\nimport Beach from 'Pages/uilib/usage/accessibility/assets/beach';\nexport const _frontmatter = {\n  \"title\": \"Icon\",\n  \"draft\": false\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Accessibility of Icons`}</h1>\n    <p>{`By using inline SVG, we have the possibility to make graphical assets both `}<strong parentName=\"p\">{`responsive`}</strong>{` and `}<strong parentName=\"p\">{`interactive`}</strong>{`. In order to do so, use the `}<a parentName=\"p\" {...{\n        \"href\": \"/uilib/components/icon\"\n      }}>{`Icon`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/uilib/components/icon-primary\"\n      }}>{`IconPrimary`}</a>{` component. These components provide the needed runtime processing.`}</p>\n    <h2>{`Decorative Icons`}</h2>\n    <p>{`If your icons are purely `}<strong parentName=\"p\">{`decorative`}</strong>{`, youâ€™ll need to manually add an `}<strong parentName=\"p\">{`aria-hidden`}</strong>{` (results in `}<inlineCode parentName=\"p\">{`aria-hidden=\"true\"`}</inlineCode>{`) attribute to each of your icons so your app is \"accessible\".`}</p>\n    <ComponentBox scope={{\n      Beach\n    }} mdxType=\"ComponentBox\">\n      {`\n<Icon icon={Beach} size=\"64\" title=\"Beach\" aria-hidden=\"true\" />\n`}\n    </ComponentBox>\n    <h2>{`Responsive Icons`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`size=\"auto\"`}</inlineCode>{` to force the icon to inherit the size of its parent element.`}</p>\n    <ComponentBox scope={{\n      Beach\n    }} mdxType=\"ComponentBox\">\n      {`\n<h1>My H1 with an icon <Icon icon={Beach} title=\"Beach\" size=\"auto\" /></h1>\n<h4>My H4 with the same icon <Icon icon={Beach} title=\"Beach\" size=\"auto\" /></h4>\n`}\n    </ComponentBox>\n    <h2>{`SVG Icons`}</h2>\n    <p><em parentName=\"p\">{`Scalable Vector Graphics`}</em>{` can be set up to be scaleable and actually respond to the `}<inlineCode parentName=\"p\">{`font-size`}</inlineCode>{`.`}</p>\n    <ComponentBox scope={{\n      Beach\n    }} useRender mdxType=\"ComponentBox\">\n      {`\nconst Responsive = styled.span\\`\n  svg {\n    font-size: inherit;\n    width: 1.5em;\n    height: 1.5em;\n  }\n\\`\n\\nconst Svg = (props) => (<svg\n  width=\"16\"\n  height=\"16\"\n  viewBox=\"0 0 16 16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  {...props}\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M4.03 5.22a.75.75 0 0 0-1.06 1.06l4.5 4.5a.75.75 0 0 0 1.06 0l4.5-4.5a.75.75 0 0 0-1.06-1.06L8 9.19 4.03 5.22z\"\n    fill=\"#000\"\n  />\n</svg>)\n\\nrender(<>\n  <p>\n    <Svg width=\"24\" height=\"24\" /> - has a fixed size\n  </p>\n  <p>\n    <Responsive><Svg /></Responsive> - is responsive\n  </p>\n  <p>\n    <span className=\"dnb-icon dnb-icon--medium\">\n      <Svg />\n    </span> - uses <code>.dnb-icon</code>\n  </p>\n</>)\n`}\n    </ComponentBox>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}