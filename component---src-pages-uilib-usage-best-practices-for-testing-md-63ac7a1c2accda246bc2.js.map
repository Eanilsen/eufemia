{"version":3,"sources":["webpack:///./src/pages/uilib/usage/best-practices/for-testing.md"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_6__","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_8__","name","parentName","React","Component","isMDXComponent","_frontmatter","title","menuTitle","status","draft","order"],"mappings":"4TAKqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,wDAKV,IAAAO,EAIHL,KAAKH,MAFPS,EAFKD,EAELC,WAFKC,IAAAF,EAAA,gBAKP,OAAOG,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,UAAUL,WAAYA,GAAYE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAA9B,yBACpDE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,oOAEAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAA9B,iCACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,2HACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,qRACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAA9B,kBACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAC5BE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,EAAYM,WAAW,MAArD,2BAAsFJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,SAASL,WAAYA,EAAYM,WAAW,MAAzD,UAAtF,yDACAJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,EAAYM,WAAW,MAArD,4BAAuFJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,SAASL,WAAYA,EAAYM,WAAW,MAAzD,YAAvF,iHACAJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,EAAYM,WAAW,MAArD,2DAAsHJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,SAASL,WAAYA,EAAYM,WAAW,MAAzD,aAAtH,0CAEFJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAA9B,qBACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,kTAEAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,gHAA0JE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,aAAaL,WAAYA,EAAYM,WAAW,KAA7D,OAA1J,QAAoPJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,aAAaL,WAAYA,EAAYM,WAAW,KAA7D,SAApP,KACAJ,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,KAAKL,WAAYA,GAA9B,sBACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,qOACAE,OAAAC,EAAA,EAAAD,CAACE,EAAA,OAAD,CAAQC,KAAK,IAAIL,WAAYA,GAA7B,8JA7BkCO,IAAMC,WAkC9ClB,EAAWmB,gBAAiB,EACrB,IAAMC,EAAe,CAC1BC,MAAS,6BACTC,UAAa,cACbC,OAAU,MACVC,OAAS,EACTC,MAAS","file":"component---src-pages-uilib-usage-best-practices-for-testing-md-63ac7a1c2accda246bc2.js","sourcesContent":["import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n\n\n  const layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" components={components}><MDXTag name=\"h1\" components={components}>{`Testing Frontend Code`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`It is a good idea to include some tips and tricks for frontend testing\nSince accessibility and user experience are major factors in any design system, it may be sensible to include some tips and tricks for frontend testing.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Write tests, but not too many`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`That said, write tests to gain confidence that your code is strong for both refactoring, enhancements and new features.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Frontend code is changing and moving fast. So 100% code coverage should never be a goal by itself, rather try to make tests which reflect what the end-user would do. By doing so, you will probably cover several internal functions and states by simulating a \"click\" anyways.`}</MDXTag>\n      <MDXTag name=\"h3\" components={components}>{`Static testing`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use static testers like `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`ESLint`}</MDXTag>{` (also in your editor of choice) to detect typos etc.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use code formatters like `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`Prettier`}</MDXTag>{` to uniform code style. This makes working together so much more fun and makes your everyday more productive.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Like ESLint, there is also a linter for styling, called `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`StyleLint`}</MDXTag>{`. It works even on styled components.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"h3\" components={components}>{`Integration tests`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Do not write unit tests in frontend code. But make integration tests.\nThink as a user. Think how the user will interact with your application. Do not shallow test, but test components like a user would get it (use mount or render to also test their children, cause a user would do have these as well).`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`There are several packages you can integrate in your test, so your can test your code for accessibility e.g. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`axe`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pa11y`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"h3\" components={components}>{`End-to-end testing`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Having tests which actually run in a browser, makes a lot of sense in frontend code. This method of testing is good to gain confidence and ensure a flow of interactions is working correctly - like a user registration process.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Of course, end-to-end tests can be run on a CI server as well. Make sure you run your tests against a production-like version of your application.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nMDXContent.isMDXComponent = true;\nexport const _frontmatter = {\n  \"title\": \"Best Practices for testing\",\n  \"menuTitle\": \"for testing\",\n  \"status\": \"wip\",\n  \"draft\": false,\n  \"order\": 3\n};\n      "],"sourceRoot":""}