(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{1196:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return O}),t.d(e,"_frontmatter",function(){return D});var o=t(22),a=t.n(o),r=t(12),p=t.n(r),c=t(10),m=t.n(c),i=t(13),s=t.n(i),d=t(11),u=t.n(d),l=t(14),b=t.n(l),h=t(2),g=t(4),f=t.n(g),j=t(0),v=(t(286),t(20)),y=t(56),O=function(n){function e(n){var t;return p()(this,e),(t=s()(this,u()(e).call(this,n))).layout=null,t}return b()(e,n),m()(e,[{key:"render",value:function(){var n=this.props,e=n.components;a()(n,["components"]);return Object(h.d)(j.MDXTag,{name:"wrapper",components:e},Object(h.d)(j.MDXTag,{name:"h1",components:e},"Component Properties"),Object(h.d)(j.MDXTag,{name:"p",components:e},"Every ",Object(h.d)(j.MDXTag,{name:"a",components:e,parentName:"p",props:{href:"/uilib/components"}},"Component")," has its own ",Object(h.d)(j.MDXTag,{name:"inlineCode",components:e,parentName:"p"},"properties")," to make them work for a variety of cases. You may have a look at the table describing all the possibilities. Check out for example the ",Object(h.d)(j.MDXTag,{name:"a",components:e,parentName:"p",props:{href:"/uilib/components/button#info"}},"Button Properties"),"."),Object(h.d)(j.MDXTag,{name:"p",components:e},"Below are some examples. You can even modify them right away in the Browser."),Object(h.d)(j.MDXTag,{name:"h2",components:e},"Large Buttons & Icons"),Object(h.d)(v.a,null,'\n<Button\n  variant="secondary"\n  text="Secondary Button"\n  icon="chevron_right_medium"\n  size="large"\n/>\n<Button\n  icon="chevron_right"\n  icon_size="medium"\n  size="large"\n/>\n'),Object(h.d)(j.MDXTag,{name:"h2",components:e},"Extended example"),Object(h.d)(v.a,{scope:{hamburgerIcon:y.hamburger},useRender:!0},'\nconst Wrapper = styled.div`\n  .dnb-button {\n    --button-width: 4rem;\n    --button-height: 4rem;\n    --button-border-radius: 2rem;\n    svg {\n      color: fuchsia;\n    }\n  }\n`\nconst myHandler = () => alert(\'Hello\')\nrender(\n  <Wrapper>\n    <Button\n      variant="secondary"\n      icon={hamburgerIcon}\n      size="default"\n      on_click={myHandler}\n    />\n    <Button\n      variant="secondary"\n      size="default"\n      on_click={myHandler}\n    >\n      <Icon icon={hamburgerIcon} />\n    </Button>\n  </Wrapper>\n)\n'),Object(h.d)(j.MDXTag,{name:"h2",components:e},"Web Components and properties"),Object(h.d)(j.MDXTag,{name:"blockquote",components:e},Object(h.d)(j.MDXTag,{name:"p",components:e,parentName:"blockquote"},"What if a property has to change at runtime?")),Object(h.d)(j.MDXTag,{name:"p",components:e},"Changing a property (",Object(h.d)(j.MDXTag,{name:"inlineCode",components:e,parentName:"p"},"props"),") at runtime is a common thing in React. But also ",Object(h.d)(j.MDXTag,{name:"inlineCode",components:e,parentName:"p"},"dnb-ui-lib")," web components support ",Object(h.d)(j.MDXTag,{name:"inlineCode",components:e,parentName:"p"},"prop")," changes.\nKeep in mind that not all components are tested to the last detail.\nSo, if you come over some special use cases, please contribute back and make a pull request."),Object(h.d)(v.a,{useRender:!0},'\nconst Component = () => {\n  const time = new Date().toLocaleTimeString()\n  return (\n    <>\n      <dnb-form-label for_id="form-input">\n        Web Component property updates\n      </dnb-form-label>\n      <dnb-input id="form-input" value={time} />\n    </>\n  )\n}\nconst RenderHelper = () => {\n  useEffect(() => {\n    const timer = setInterval(() => render(<RenderHelper />), 1e3)\n    return () => clearTimeout(timer)\n  }, [])\n  return <Component />\n}\nrender(<RenderHelper />)\n'))}}]),e}(f.a.Component);O.isMDXComponent=!0;var D={title:"Component Properties",draft:!1,order:6}}}]);
//# sourceMappingURL=component---src-pages-uilib-usage-customisation-component-properties-md-13bb745b62da0bebef0b.js.map