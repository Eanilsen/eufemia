(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{1418:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",function(){return m}),t.d(n,"default",function(){return u});t(17),t(14),t(22),t(21),t(20),t(23),t(3),t(5);var o=t(0),r=(t(336),t(13)),a=t(63);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m={title:"Component Properties",draft:!1,order:6},c={_frontmatter:m},l="wrapper";function u(e){var n=e.components,t=p(e,["components"]);return Object(o.mdx)(l,i({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",null,"Component Properties"),Object(o.mdx)("p",null,"Every ",Object(o.mdx)("a",i({parentName:"p"},{href:"/uilib/components"}),"Component")," has its own ",Object(o.mdx)("inlineCode",{parentName:"p"},"properties")," to make them work for a variety of cases. You may have a look at the table describing all the possibilities. Check out for example the ",Object(o.mdx)("a",i({parentName:"p"},{href:"/uilib/components/button#info"}),"Button Properties"),"."),Object(o.mdx)("p",null,"Below are some examples. You can even modify them right away in the Browser."),Object(o.mdx)("h2",null,"Large Buttons & Icons"),Object(o.mdx)(r.a,{mdxType:"ComponentBox"},'\n<Button\n  variant="secondary"\n  text="Secondary Button"\n  icon="chevron_right_medium"\n  size="large"\n/>\n<Button\n  icon="chevron_right"\n  icon_size="medium"\n  size="large"\n/>\n'),Object(o.mdx)("h2",null,"Extended example"),Object(o.mdx)(r.a,{scope:{hamburgerIcon:a.hamburger},useRender:!0,mdxType:"ComponentBox"},'\nconst Wrapper = styled.div`\n  .dnb-button {\n    --button-width: 4rem;\n    --button-height: 4rem;\n    --button-border-radius: 2rem;\n    svg {\n      color: fuchsia;\n    }\n  }\n`\nconst myHandler = () => alert(\'Hello\')\nrender(\n  <Wrapper>\n    <Button\n      variant="secondary"\n      icon={hamburgerIcon}\n      size="default"\n      on_click={myHandler}\n    />\n    <Button\n      variant="secondary"\n      size="default"\n      on_click={myHandler}\n    >\n      <Icon icon={hamburgerIcon} />\n    </Button>\n  </Wrapper>\n)\n'),Object(o.mdx)("h2",null,"Web Components and properties"),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"What if a property has to change at runtime?")),Object(o.mdx)("p",null,"Changing a property (",Object(o.mdx)("inlineCode",{parentName:"p"},"props"),") at runtime is a common thing in React. But also ",Object(o.mdx)("inlineCode",{parentName:"p"},"dnb-ui-lib")," web components support ",Object(o.mdx)("inlineCode",{parentName:"p"},"prop")," changes.\nKeep in mind that not all components are tested to the last detail.\nSo, if you come over some special use cases, please contribute back and make a pull request."),Object(o.mdx)(r.a,{useRender:!0,mdxType:"ComponentBox"},'\nconst Component = () => {\n  const time = new Date().toLocaleTimeString()\n  return (\n    <>\n      <dnb-form-label for_id="form-input">\n        Web Component property updates\n      </dnb-form-label>\n      <dnb-input id="form-input" value={time} />\n    </>\n  )\n}\nconst RenderHelper = () => {\n  useEffect(() => {\n    const timer = setInterval(() => render(<RenderHelper />), 1e3)\n    return () => clearTimeout(timer)\n  }, [])\n  return <Component />\n}\nrender(<RenderHelper />)\n'))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-uilib-usage-customisation-component-properties-md-4787f94e53b846361f85.js.map