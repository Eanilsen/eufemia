/*
* Core style loader
*
* ======================================================================== */

// core imports
@import './reset.scss';
@import './properties.scss';
@import './utilities.scss';
@import './typography.scss';
@import './scopes.scss';

// Global body style
body {
  @include bodyDefault();
  @media print {
    background-color: white;
  }
}

// Anker
a {
  position: relative; // because of z-index and underline/hover sudo classes
  z-index: 1; // because of focus handling
  outline: none; // because of focus handling
  padding: 0.3125em 0.3125em 0.125em;
  margin: -0.3125em -0.3125em -0.125em;
  // This way we make sure we never have a line break in an Anker
  // Cause this messes up the "drawUnderlineBorder" mechanism
  white-space: pre;

  color: inherit;
  color: var(--color-sea-green, inherit);
  text-decoration: none;

  // border
  @include drawUnderlineBorder();

  // bg
  @include drawUnderlineBackground();

  &:active,
  &:hover {
    // bg
    &::before {
      max-height: 100%;
    }

    // border
    &::after {
      left: 0.1em;
      right: 0.1em;
    }
  }
  &:active {
    color: #fff;
    // bg
    &::before {
      background-color: var(--color-sea-green);
    }
    // border
    &::after {
      border-bottom-color: var(--color-sea-green);
    }
  }

  &:focus {
    @include fakeFocus();
  }
}
a.no-dnb-style {
  padding: 0;
  margin: 0;
  white-space: normal;

  &:active,
  &:hover {
    color: inherit;
  }

  &::after {
    content: none;
  }
  &::before {
    content: none;
  }
}
a.no-underline {
  // underline
  &::after {
    border-bottom-color: transparent;
    content: none;
  }
}
a.no-underline-hover {
  // bg
  &::before {
    content: none;
  }
}
a.no-underline-hover-animation {
  // bg
  &::before {
    transition: max-height 0.01s linear;
  }
}
a:not([href]) {
  cursor: pointer;
  user-select: none;
}

// Focus management
html[data-whatinput='mouse'] .dnb-style *:focus {
  outline: none;
}
html[data-whatinput='keyboard'] .dnb-style *:not(a):not(div):focus {
  @include fakeFocus();
}
.dnb-no-focus {
  outline: none;
}
.dnb-fake-focus {
  @include fakeFocus();
}
.dnb-tab-focus {
  outline: none;
  &:focus {
    @include fakeFocus('keyboard');
  }
}
.dnb-always-focus {
  &:focus {
    @include fakeBorder(var(--color-signal-orange), null, !important);
  }
}

// Layout management
// Use this class where components are trying to add background boxes/borders/lines
// to the very outer sides of the page
// e.g. Tabs are using this technique
// In some cases we dont want to have that effect.
// E.g. if we have a menu to the left or right side
.dnb-page-content-inner {
  overflow: hidden;
}

// TODO: considder to take this out

$breakpoints: (
  'small': 320px,
  'medium': 700px,
  'large': 1024px,
  'xLarge': 1400px
);

.dnb-hide-on-mobile {
  @include allBelow(medium) {
    display: none;
  }
}
.dnb-mobile-exclusive {
  @include allAbove(medium) {
    display: none;
  }
}
.dnb-width-limit {
  margin: 0 auto;
  width: 100%;
  max-width: map-get($map: $breakpoints, $key: large);
  padding: 0 0.5rem;

  @include allAbove(medium) {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}
.dnb-belt {
  padding: 1rem 0;
  width: 100%;
  background: var(--color-sea-green-4);
}
.dnb-nudge {
  display: inline-flex;
  flex: 0 0 100%;

  @for $i from 1 through 10 {
    &--vertical {
      &[data-nudges='#{$i}'] {
        @include nudger(vertical, #{$i});
      }
    }
    &--horizontal {
      &[data-nudges='#{$i}'] {
        @include nudger(horizontal, #{$i});
      }
    }
  }
}
.dnb-sr-only {
  @include sr-only();
}
.dnb-not-sr-only {
  @include notSrOnly();
}
.dnb-unstyled-list {
  @include unstyledList();
}
