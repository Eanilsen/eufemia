/*
* Core style loader
*
* ======================================================================== */

@charset 'utf-8';

// core
@import './reset.scss';
@import './variables.scss';
@import './utilities.scss';
@import './font-import.scss';
@import './typography.scss';
@import './scopes.scss';
@import './form.scss'; // TODO: considder to remove this, and use it only as a pattern
// @import './_grid.scss';

// dnb core styles - they have to be used by a parent css class: .dnb-style
@import './dnb-style.scss';

// Global body style
body {
  @include bodyDefault();
  @media print {
    background-color: white;
  }
}

// Anker
a {
  position: relative; // because of z-index and underline/hover sudo classes
  z-index: 1; // because of focus handling
  outline: none; // because of focus handling
  padding: 0.125em 0.3125em; // 16/1 - give a padding round, because of focus ring
  margin: -0.125em -0.3125em; // 16/1 - give a padding round, because of focus ring

  // This way we make sure we never have a line break in an Anker
  // Cause this messes up the "drawUnderlineLine" mechanism
  white-space: pre;

  color: inherit;
  text-decoration: none;

  // underline
  @include drawUnderlineLine();

  // bg
  @include drawUnderlineBackground();

  &:active,
  &:hover {
    // bg
    &::before {
      max-height: 100%;
    }

    // underline
    &::after {
      left: 0.2em;
      right: 0.2em;
    }
  }
  &:active {
    // underline
    &::after {
      border-bottom-color: red;
    }
  }

  &:focus {
    @include fakeFocus(false);
  }
}
a.no-underline {
  // underline
  &::after {
    border-bottom-color: transparent;
  }
}
a.no-underline-hover {
  // bg
  &::before {
    background-color: transparent;
  }
}
a.no-underline-hover-animation {
  // bg
  &::before {
    transition: max-height 0.01s linear;
  }
}
a:not([href]) {
  cursor: pointer;
  user-select: none;
  border: none;

  &:active,
  &:hover {
    color: var(--color-signal-orange);
  }
}

// Focus management
html[data-whatinput='mouse'] .dnb-style *:focus {
  outline: none;
}
html[data-whatinput='keyboard'] .dnb-style *:not(a):not(div):focus {
  @include fakeFocus('mouse');
}
.dnb-no-focus {
  outline: none;
}
.dnb-fake-focus {
  @include fakeFocus();
}
.dnb-tab-focus {
  outline: none;
  &:focus {
    @include tabFocus();
  }
}
.dnb-always-focus {
  &:focus {
    @include fakeBorder($color-signal-orange, null, !important);
  }
}

// Layout management
// Use this class where components are trying to add background boxes/borders/lines
// to the very outer sides of the page
// e.g. Tabs are using this technique
// In some cases we dont want to have that effect.
// E.g. if we have a menu to the left or right side
.dnb-page-content-inner {
  overflow: hidden;
}

// TODO: considder to take this out
.dnb-hide-on-mobile {
  @include allBelow(medium) {
    display: none;
  }
}
.dnb-mobile-exclusive {
  @include allAbove(medium) {
    display: none;
  }
}
.dnb-width-limit {
  margin: 0 auto;
  width: 100%;
  max-width: map-get($map: $breakpoints, $key: large);
  padding: 0 0.5rem;

  @include allAbove(medium) {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}
.dnb-belt {
  padding: 1rem 0;
  width: 100%;
  background: $color-light-grey;
}
.dnb-nudge {
  display: inline-flex;
  flex: 0 0 100%;

  @for $i from 1 through 10 {
    &--vertical {
      &[data-nudges='#{$i}'] {
        @include nudger(vertical, #{$i});
      }
    }
    &--horizontal {
      &[data-nudges='#{$i}'] {
        @include nudger(horizontal, #{$i});
      }
    }
  }
}
.dnb-sr-only {
  @include sr-only();
}
.dnb-not-sr-only {
  @include notSrOnly();
}
.dnb-unstyled-list {
  @include unstyledList();
}
