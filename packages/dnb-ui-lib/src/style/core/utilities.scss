/*
 * Utilities
 * ========================================================================== */

// Mobile-first media query helper
@mixin media($bp) {
  @media screen and (min-width: #{$bp}) {
    @content;
  }
}

// Screen reader only helper
@mixin sr-only() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
.dnb-sr-only {
  @include sr-only();
}

// This "negates" the sr-only() helper; useful if
// we want the default state of something to be
// for screen readers only, but we want to force
// it to show for sighted users under more specific
// conditions.
@mixin notSrOnly() {
  position: static;
}
.dnb-not-sr-only {
  @include notSrOnly();
}

// Unstyled list helper
@mixin unstyledList() {
  margin: 0;
  list-style-type: none;
  padding-left: 0;

  > li {
    margin-bottom: 0;
  }
}

.dnb-unstyled-list {
  @include unstyledList();
}

// Font smoothing mixin
// Only use for light text on dark background
@mixin fontSmoothing {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@mixin numberFeature($variant, $setting) {
  font-variant-numeric: $variant;
  -moz-font-feature-settings: '#{$setting}';
  -webkit-font-feature-settings: '#{$setting}';
  font-feature-settings: '#{$setting}';
}

// @mixin navActive() {
//   [data-nav-active='true'] & {
//     @content;
//   }
// }

//Uses .no-touch and .touch
//classes on <body> element
//based on js touch device test
@mixin hover($nested) {
  @if $nested {
    .no-touch & {
      &:hover {
        &[disabled] {
          cursor: not-allowed;
        }
        &:not([disabled]) {
          @content;
        }
      }
    }
  } @else {
    .no-touch {
      &:hover {
        &[disabled] {
          cursor: not-allowed;
        }
        &:not([disabled]) {
          @content;
        }
      }
    }
  }
}

//Mixins for media queries
//Refers to the $breakpoints object in "variables.scss"

//Example usage:
//@include allAbove(phone){ styles go here.. }
@mixin allAbove($size) {
  @media screen and (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}

@mixin allBelow($size) {
  @media screen and (max-width: map-get($breakpoints, $size)) {
    @content;
  }
}

@mixin fakeFocus(
  $onInput: 'mouse',
  $color: $color-emerald-green,
  $shadow: null
) {
  outline: none;
  border-color: transparent;

  @if $onInput {
    html[data-whatinput='#{$onInput}'] &:not(.dnb-no-mouse-focus) {
      transition: box-shadow 0.1s ease-out 0s;
      @include fakeBorder($color, $shadow);
    }
  }

  html[data-whatinput='keyboard'] & {
    @include tabFocus();
  }
}

@mixin tabFocus($important: null) {
  @include fakeBorder($color-signal-orange, null, $important);
}

@mixin fakeBorder(
  $color: $color-sea-green,
  $shadow: null,
  $important: null
) {
  // we use !important, cause we have no changes to select the selctor right
  // in some cases we have another state where we use box-shadow
  // but with important, we take care of that we actually can use use it
  @if $shadow {
    box-shadow: $shadow $important;
  } @else {
    box-shadow: 0 0 0 2px $color $important;
  }
}

.dnb-no-focus {
  outline: none;
}

.dnb-fake-focus {
  @include fakeFocus();
}

.dnb-tab-focus {
  &:focus {
    @include tabFocus(!important);
  }
}

.dnb-hide-on-mobile {
  @include allBelow(medium) {
    display: none;
  }
}

.dnb-mobile-exclusive {
  @include allAbove(medium) {
    display: none;
  }
}

.dnb-width-limit {
  margin: 0 auto;
  width: 100%;
  max-width: map-get($map: $breakpoints, $key: large);
  padding: 0 0.5rem;

  @include allAbove(medium) {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

.dnb-belt {
  padding: 1rem 0;
  width: 100%;
  background: $color-light-grey;
}

@mixin nudger($direction, $nudge) {
  @if $direction == 'horizontal' {
    width: #{$nudge}rem;
  }
  @if $direction == 'vertical' {
    height: #{$nudge}rem;
  }
}

.dnb-nudge {
  display: inline-flex;
  flex: 0 0 100%;

  @for $i from 1 through 10 {
    &--vertical {
      &[data-nudges='#{$i}'] {
        @include nudger(vertical, #{$i});
      }
    }
    &--horizontal {
      &[data-nudges='#{$i}'] {
        @include nudger(horizontal, #{$i});
      }
    }
  }
}
