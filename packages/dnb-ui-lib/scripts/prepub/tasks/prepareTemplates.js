/**
 * Insert all the components/patterns into the main lib index file
 * By using a template
 *
 */

import fs from 'fs-extra'
import path, { join as joinPath } from 'path'
import camelCase from 'camelcase'
import prettier from 'prettier'
import { ErrorHandler, log } from '../../lib'

const prettierrc = JSON.parse(
  fs.readFileSync(path.resolve(__dirname, '../../../.prettierrc'), 'utf-8')
)

const prepareTemplates = async () => {
  log.start('> PrePublish: Starting the index template lib factory ...')

  // process components
  const components = await runFactory({
    templateObjectToFill: '{ Template }',
    templateListToExtend: `import Template from './template/Template'`,
    templateListToExtendBy: 'Template',
    srcFile: path.resolve(
      __dirname,
      '../../../src/core/templates/lib-index-template.js'
    ),
    destFile: path.resolve(__dirname, '../../../src/components/index.js'),
    processToNamesList: path.resolve(
      __dirname,
      '../../../src/components/'
    ),
    processToNamesIgnoreList: ['web-components', 'style'],
    processToNamesListByUsingFolders: true
  }).then(res => {
    if (require.main === module) {
      log.succeed(
        '> PrePublish: Created the index template with all the components'
      )
    }
    return res
  })

  // process patterns
  const patterns = await runFactory({
    templateObjectToFill: '{ Template }',
    templateListToExtend: `import Template from './template/Template'`,
    templateListToExtendBy: 'Template',
    srcFile: path.resolve(
      __dirname,
      '../../../src/core/templates/lib-index-template.js'
    ),
    destFile: path.resolve(__dirname, '../../../src/patterns/index.js'),
    processToNamesList: path.resolve(__dirname, '../../../src/patterns/'),
    processToNamesIgnoreList: ['web-components', 'style'],
    processToNamesListByUsingFolders: true
  }).then(res => {
    if (require.main === module) {
      log.text = '> Created the index template with all the patterns'
    }
    return res
  })

  // fix the glory main index
  await runFactory({
    templateObjectToFill: '{ Template }',
    templateListToExtend: `import Template from './{type}/template/Template'`,
    templateListToExtendBy: 'Template',
    srcFile: path.resolve(
      __dirname,
      '../../../src/core/templates/main-index-template.js'
    ),
    destFile: path.resolve(__dirname, '../../../src/index.js'),
    processToNamesList: [...components, ...patterns]
  }).then(res => {
    if (require.main === module) {
      log.text = '> Created the main index with all the libs'
    }
    return res
  })
}

const autoAdvice =
  '/**\n * ATTENTION: This file is auto generated by using "prepareTemplates".\n * Do not change the content!\n *\n */\n\n'

const runFactory = async ({
  templateObjectToFill,
  templateListToExtend,
  templateListToExtendBy,
  srcFile,
  destFile,
  processToNamesList,
  processToNamesIgnoreList = [],
  processToNamesListByUsingFolders = false
}) => {
  if (typeof processToNamesList === 'string') {
    const __orig__processToNamesList = processToNamesList
    processToNamesList = await fs.readdir(processToNamesList)
    processToNamesList = processToNamesList
      .sort()
      .filter(file => {
        if (/not_in_use|__tests__/g.test(file)) {
          return false
        }
        return !processToNamesIgnoreList.includes(file)
      })
      .map(file => ({
        source: joinPath(__orig__processToNamesList, file),
        file
      }))
    if (processToNamesListByUsingFolders) {
      processToNamesList = processToNamesList.filter(({ source }) =>
        fs.lstatSync(source).isDirectory()
      )
    } else {
      processToNamesList = processToNamesList.filter(({ source }) =>
        fs.lstatSync(source).isFile()
      )
    }
  }

  const template = await fs.readFile(srcFile, 'utf-8')

  const content = template
    .trim()
    .replace(
      new RegExp(templateObjectToFill, 'g'),
      `{ ${processToNamesList
        .map(({ file }) => camelCase(file, { pascalCase: true }))
        .join(', ')} }`
    )
    .replace(
      new RegExp(templateListToExtend, 'g'),
      processToNamesList
        .map(({ file, source }) => {
          let res = templateListToExtend
            .replace(
              new RegExp(templateListToExtendBy, 'g'),
              camelCase(file, { pascalCase: true })
            )
            .replace(
              new RegExp(templateListToExtendBy.toLowerCase(), 'g'),
              file
            )

          // in case we have a type to replace
          if (/\{type\}/.test(res)) {
            const type = source
              .trim('/')
              .split(/\//g)
              .slice(-2, -1)[0]
            res = res.replace(new RegExp('{type}', 'g'), type)
          }

          return res
        })
        .join('\n')
    )

  try {
    await fs.writeFile(
      destFile,
      prettier.format(`${autoAdvice}${content}`, {
        ...prettierrc,
        parser: 'babel'
      })
    )
  } catch (e) {
    log.fail(`There was an error on creating ${destFile}!`)
    new ErrorHandler(e)
  }

  return processToNamesList
}

if (require.main === module && process.env.NODE_ENV !== 'test') {
  log.start()
  prepareTemplates().then(() => {
    log.succeed()
  })
}

export { prepareTemplates }
